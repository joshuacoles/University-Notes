"use strict";var e=require("path"),t=require("obsidian");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var r=n(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function i(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):function(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function o(e){var t={exports:{}};return e(t,t.exports),t.exports}var s=o((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.defaults=t.composeannotation=t.collecttextnodes=t.build=void 0;const n={children:e=>e.children,annotatetextnode:(e,t)=>"text"===e.type?{offset:{end:e.position.end.offset,start:e.position.start.offset},text:t.substring(e.position.start.offset,e.position.end.offset)}:null,interpretmarkup:(e="")=>e};function r(e,t,r=n){const i=[];return function e(n){const o=r.annotatetextnode(n,t);null!==o&&i.push(o);const s=r.children(n);null!==s&&Array.isArray(s)&&s.forEach(e)}(e),i}function i(e,t,r=n){const i=[];let o={offset:{end:0,start:0}};for(const n of t){const t=e.substring(o.offset.end,n.offset.start);i.push({interpretAs:r.interpretmarkup(t),markup:t,offset:{end:n.offset.start,start:o.offset.end}}),i.push(n),o=n}const s=e.substring(o.offset.end,e.length);return i.push({interpretAs:r.interpretmarkup(s),markup:s,offset:{end:e.length,start:o.offset.end}}),{annotation:i}}t.defaults=n,t.collecttextnodes=r,t.composeannotation=i,t.build=function(e,t,o=n){return i(e,r(t(e),e,o),o)}})),a=o((function(e){!function(){var t;function n(e){for(var t,n,r,i,o=1,s=[].slice.call(arguments),a=0,u=e.length,c="",l=!1,f=!1,h=function(){return s[o++]},d=function(){for(var n="";/\d/.test(e[a]);)n+=e[a++],t=e[a];return n.length>0?parseInt(n):null};a<u;++a)if(t=e[a],l)switch(l=!1,"."==t?(f=!1,t=e[++a]):"0"==t&&"."==e[a+1]?(f=!0,t=e[a+=2]):f=!0,i=d(),t){case"b":c+=parseInt(h(),10).toString(2);break;case"c":c+="string"==typeof(n=h())||n instanceof String?n:String.fromCharCode(parseInt(n,10));break;case"d":c+=parseInt(h(),10);break;case"f":r=String(parseFloat(h()).toFixed(i||6)),c+=f?r:r.replace(/^0/,"");break;case"j":c+=JSON.stringify(h());break;case"o":c+="0"+parseInt(h(),10).toString(8);break;case"s":c+=h();break;case"x":c+="0x"+parseInt(h(),10).toString(16);break;case"X":c+="0x"+parseInt(h(),10).toString(16).toUpperCase();break;default:c+=t}else"%"===t?l=!0:c+=t;return c}(t=e.exports=n).format=n,t.vsprintf=function(e,t){return n.apply(null,[e].concat(t))},"undefined"!=typeof console&&"function"==typeof console.log&&(t.printf=function(){console.log(n.apply(null,arguments))})}()})),u=l(Error),c=u;function l(e){return t.displayName=e.displayName||e.name,t;function t(t){return t&&(t=a.apply(null,arguments)),new e(t)}}u.eval=l(EvalError),u.range=l(RangeError),u.reference=l(ReferenceError),u.syntax=l(SyntaxError),u.type=l(TypeError),u.uri=l(URIError),u.create=l;var f=function(e){var t,n=e||"yaml",r=[],i=-1;"string"!=typeof n&&"length"in n||(n=[n]);t=n.length;for(;++i<t;)r[i]=p(n[i]);return r},h={}.hasOwnProperty,d={yaml:"-",toml:"+"};function p(e){var t=e;if("string"==typeof t){if(!h.call(d,t))throw c("Missing matter definition for `%s`",t);t={type:t,marker:d[t]}}else if("object"!=typeof t)throw c("Expected matter to be an object, not `%j`",t);if(!h.call(t,"type"))throw c("Missing `type` in matter `%j`",t);if(!h.call(t,"fence")&&!h.call(t,"marker"))throw c("Missing `marker` or `fence` in matter `%j`",t);return t}function g(e){var t,n=e.type,r=e.anywhere,i=n+"Value",o=n+"Fence",s=o+"Sequence",a={tokenize:function(e,n,r){var i=0;return function(n){if(n===t.charCodeAt(i))return e.enter(o),e.enter(s),a(n);return r(n)};function a(n){return i===t.length?(e.exit(s),-2===n||-1===n||32===n?(e.enter("whitespace"),u(n)):c(n)):n===t.charCodeAt(i)?(e.consume(n),i++,a):r(n)}function u(t){return-2===t||-1===t||32===t?(e.consume(t),u):(e.exit("whitespace"),c(t))}function c(t){return-5===t||-4===t||-3===t||null===t?(e.exit(o),n(t)):r(t)}},partial:!0};return{tokenize:function(o,s,u){var c=this;return function(i){var s=c.now();if(1!==s.column||!r&&1!==s.line)return u(i);return o.enter(n),t=m(e,"open"),o.attempt(a,l,u)(i)};function l(n){return t=m(e,"close"),d(n)}function f(e){return-5===e||-4===e||-3===e||null===e?d(e):(o.enter(i),h(e))}function h(e){return-5===e||-4===e||-3===e||null===e?(o.exit(i),d(e)):(o.consume(e),h)}function d(e){return null===e?u(e):(o.enter("lineEnding"),o.consume(e),o.exit("lineEnding"),o.attempt(a,p,f))}function p(e){return o.exit(n),s(e)}},concrete:!0}}function m(e,t){var n;return e.marker?(n=v(e.marker,t))+n+n:v(e.fence,t)}function v(e,t){return"string"==typeof e?e:e[t]}var y=function(e){var t,n,r=f(e),i=r.length,o=-1,s={};for(;++o<i;)t=r[o],(n=m(t,"open").charCodeAt(0))in s?s[n].push(g(t)):s[n]=[g(t)];return{flow:s}},x=function(e){var t,n=f(e),r=n.length,i=-1,o={},s={};for(;++i<r;)t=n[i],o[t.type]=k(t),s[t.type]=b,s[t.type+"Value"]=w;return{enter:o,exit:s}};function k(e){return function(t){this.enter({type:e.type,value:""},t),this.buffer()}}function b(e){var t=this.resume();this.exit(e).value=t.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,"")}function w(e){this.config.enter.data.call(this,e),this.config.exit.data.call(this,e)}var S=function(e){var t,n=[],r={},i=f(e),o=i.length,s=-1;for(;++s<o;)t=i[s],r[t.type]=E(t),n.push({atBreak:!0,character:C(t,"open").charAt(0)});return{unsafe:n,handlers:r}};function E(e){var t=C(e,"open"),n=C(e,"close");return function(e){return t+(e.value?"\n"+e.value:"")+"\n"+n}}function C(e,t){var n;return e.marker?(n=A(e.marker,t))+n+n:A(e.fence,t)}function A(e,t){return"string"==typeof e?e:e[t]}var T=function(e){var t=this.data();function n(e,n){t[e]?t[e].push(n):t[e]=[n]}n("micromarkExtensions",y(e)),n("fromMarkdownExtensions",x(e)),n("toMarkdownExtensions",S(e))};var q=D;function D(e){return e&&(e.value||e.alt||e.title||"children"in e&&F(e.children)||"length"in e&&F(e))||""}function F(e){for(var t=[],n=-1;++n<e.length;)t[n]=D(e[n]);return t.join("")}var L=Object.assign,I={}.hasOwnProperty;var R=function(e){return e.replace(/[\t\n\r ]+/g," ").replace(/^ | $/g,"").toLowerCase().toUpperCase()},O=String.fromCharCode;var P=function(e,t){var n=parseInt(e,t);return n<9||11===n||n>13&&n<32||n>126&&n<160||n>55295&&n<57344||n>64975&&n<65008||65535==(65535&n)||65534==(65535&n)||n>1114111?"ï¿½":O(n)};var N=function(e){return e<-2};var M=function(e){return-2===e||-1===e||32===e};var B=function(e,t,n,r){var i=r?r-1:1/0,o=0;return function(r){if(M(r))return e.enter(n),s(r);return t(r)};function s(r){return M(r)&&o++<i?(e.consume(r),s):(e.exit(n),t(r))}};var _=function(e){var t,n=e.attempt(this.parser.constructs.contentInitial,(function(t){if(null===t)return void e.consume(t);return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),B(e,n,"linePrefix")}),(function(t){return e.enter("paragraph"),r(t)}));return n;function r(n){var r=e.enter("chunkText",{contentType:"text",previous:t});return t&&(t.next=r),t=r,i(n)}function i(t){return null===t?(e.exit("chunkText"),e.exit("paragraph"),void e.consume(t)):N(t)?(e.consume(t),e.exit("chunkText"),r):(e.consume(t),i)}},z=Object.defineProperty({tokenize:_},"__esModule",{value:!0});var V={tokenize:function(e,t,n){return B(e,(function(e){return null===e||N(e)?t(e):n(e)}),"linePrefix")},partial:!0},U=function(e){var t,n,r,i=this,o=[],s=0,a={tokenize:function(e,r){var s=0;return t={},a;function a(r){return s<o.length?(i.containerState=o[s][1],e.attempt(o[s][0].continuation,u,c)(r)):n.currentConstruct&&n.currentConstruct.concrete?(t.flowContinue=!0,h(r)):(i.interrupt=n.currentConstruct&&n.currentConstruct.interruptible,i.containerState={},e.attempt(j,f,h)(r))}function u(e){return s++,i.containerState._closeFlow?f(e):a(e)}function c(t){return n.currentConstruct&&n.currentConstruct.lazy?(i.containerState={},e.attempt(j,f,e.attempt(H,f,e.check(V,f,l)))(t)):f(t)}function l(e){return s=o.length,t.lazy=!0,t.flowContinue=!0,h(e)}function f(e){return t.flowEnd=!0,h(e)}function h(e){return t.continued=s,i.interrupt=i.containerState=void 0,r(e)}},partial:!0};return u;function u(t){return s<o.length?(i.containerState=o[s][1],e.attempt(o[s][0].continuation,c,l)(t)):l(t)}function c(e){return s++,u(e)}function l(r){return t&&t.flowContinue?h(r):(i.interrupt=n&&n.currentConstruct&&n.currentConstruct.interruptible,i.containerState={},e.attempt(j,f,h)(r))}function f(e){return o.push([i.currentConstruct,i.containerState]),i.containerState=void 0,l(e)}function h(t){return null===t?(m(0,!0),void e.consume(t)):(n=n||i.parser.flow(i.now()),e.enter("chunkFlow",{contentType:"flow",previous:r,_tokenizer:n}),d(t))}function d(t){return null===t?(g(e.exit("chunkFlow")),h(t)):N(t)?(e.consume(t),g(e.exit("chunkFlow")),e.check(a,p)):(e.consume(t),d)}function p(e){return m(t.continued,t&&t.flowEnd),s=0,u(e)}function g(e){r&&(r.next=e),r=e,n.lazy=t&&t.lazy,n.defineSkip(e.start),n.write(i.sliceStream(e))}function m(t,s){var a=o.length;for(n&&s&&(n.write([null]),r=n=void 0);a-- >t;)i.containerState=o[a][1],o[a][0].exit.call(i,e);o.length=t}},j={tokenize:function(e,t,n){return B(e,e.attempt(this.parser.constructs.document,t,n),"linePrefix",this.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:4)}},H={tokenize:function(e,t,n){return B(e,e.lazy(this.parser.constructs.flow,t,n),"linePrefix",this.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:4)}};var G=U,W=Object.defineProperty({tokenize:G},"__esModule",{value:!0});var Y=function(e){for(var t=-1,n=0;++t<e.length;)n+="string"==typeof e[t]?e[t].length:1;return n};var Q=function(e,t){var n=e[e.length-1];return n&&n[1].type===t?Y(n[2].sliceStream(n[1])):0},$=[].splice;var J=function(e,t,n,r){var i,o=e.length,s=0;if(t=t<0?-t>o?0:o+t:t>o?o:t,n=n>0?n:0,r.length<1e4)(i=Array.from(r)).unshift(t,n),$.apply(e,i);else for(n&&$.apply(e,[t,n]);s<r.length;)(i=r.slice(s,s+1e4)).unshift(t,0),$.apply(e,i),s+=1e4,t+=1e4};var Z=function(e){return L({},e)};function K(e,t){for(var n,r,i,o,s,a,u=e[t][1],c=e[t][2],l=t-1,f=[],h=u._tokenizer||c.parser[u.contentType](u.start),d=h.events,p=[],g={};u;){for(;e[++l][1]!==u;);f.push(l),u._tokenizer||(n=c.sliceStream(u),u.next||n.push(null),r&&h.defineSkip(u.start),u.isInFirstContentOfListItem&&(h._gfmTasklistFirstContentOfListItem=!0),h.write(n),u.isInFirstContentOfListItem&&(h._gfmTasklistFirstContentOfListItem=void 0)),r=u,u=u.next}for(u=r,i=d.length;i--;)"enter"===d[i][0]?o=!0:o&&d[i][1].type===d[i-1][1].type&&d[i][1].start.line!==d[i][1].end.line&&(m(d.slice(i+1,s)),u._tokenizer=u.next=void 0,u=u.previous,s=i+1);for(h.events=u._tokenizer=u.next=void 0,m(d.slice(0,s)),i=-1,a=0;++i<p.length;)g[a+p[i][0]]=a+p[i][1],a+=p[i][1]-p[i][0]-1;return g;function m(t){var n=f.pop();p.unshift([n,n+t.length-1]),J(e,n,2,t)}}var X=function(e){for(var t,n,r,i,o,s,a,u={},c=-1;++c<e.length;){for(;c in u;)c=u[c];if(t=e[c],c&&"chunkFlow"===t[1].type&&"listItemPrefix"===e[c-1][1].type&&((r=0)<(s=t[1]._tokenizer.events).length&&"lineEndingBlank"===s[r][1].type&&(r+=2),r<s.length&&"content"===s[r][1].type))for(;++r<s.length&&"content"!==s[r][1].type;)"chunkText"===s[r][1].type&&(s[r][1].isInFirstContentOfListItem=!0,r++);if("enter"===t[0])t[1].contentType&&(L(u,K(e,c)),c=u[c],a=!0);else if(t[1]._container||t[1]._movePreviousLineEndings){for(r=c,n=void 0;r--&&("lineEnding"===(i=e[r])[1].type||"lineEndingBlank"===i[1].type);)"enter"===i[0]&&(n&&(e[n][1].type="lineEndingBlank"),i[1].type="lineEnding",n=r);n&&(t[1].end=Z(e[n][1].start),(o=e.slice(n,c)).unshift(t),J(e,n,c-n+1,o))}}return!a},ee={tokenize:function(e,t){var n;return function(t){return e.enter("content"),n=e.enter("chunkContent",{contentType:"content"}),r(t)};function r(t){return null===t?i(t):N(t)?e.check(te,o,i)(t):(e.consume(t),r)}function i(n){return e.exit("chunkContent"),e.exit("content"),t(n)}function o(t){return e.consume(t),e.exit("chunkContent"),n=n.next=e.enter("chunkContent",{contentType:"content",previous:n}),r}},resolve:function(e){return X(e),e},interruptible:!0,lazy:!0},te={tokenize:function(e,t,n){var r=this;return function(t){return e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),B(e,i,"linePrefix")};function i(i){return null===i||N(i)?n(i):r.parser.constructs.disable.null.indexOf("codeIndented")>-1||Q(r.events,"linePrefix")<4?e.interrupt(r.parser.constructs.flow,n,t)(i):t(i)}},partial:!0};var ne=ee;var re=function(e){var t=this,n=e.attempt(V,(function(r){if(null===r)return void e.consume(r);return e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),t.currentConstruct=void 0,n}),e.attempt(this.parser.constructs.flowInitial,r,B(e,e.attempt(this.parser.constructs.flow,r,e.attempt(ne,r)),"linePrefix")));return n;function r(r){if(null!==r)return e.enter("lineEnding"),e.consume(r),e.exit("lineEnding"),t.currentConstruct=void 0,n;e.consume(r)}},ie=Object.defineProperty({tokenize:re},"__esModule",{value:!0}),oe=ae("text"),se=ae("string");function ae(e){return{tokenize:function(t){var n=this,r=this.parser.constructs[e],i=t.attempt(r,o,s);return o;function o(e){return u(e)?i(e):s(e)}function s(e){if(null!==e)return t.enter("data"),t.consume(e),a;t.consume(e)}function a(e){return u(e)?(t.exit("data"),i(e)):(t.consume(e),a)}function u(e){var t=r[e],i=-1;if(null===e)return!0;if(t)for(;++i<t.length;)if(!t[i].previous||t[i].previous.call(n,n.previous))return!0}},resolveAll:ue("text"===e?ce:void 0)}}function ue(e){return function(t,n){var r,i=-1;for(;++i<=t.length;)void 0===r?t[i]&&"data"===t[i][1].type&&(r=i,i++):t[i]&&"data"===t[i][1].type||(i!==r+2&&(t[r][1].end=t[i-1][1].end,t.splice(r+2,i-r-2),i=r+2),r=void 0);return e?e(t,n):t}}function ce(e,t){for(var n,r,i,o,s,a,u,c,l=-1;++l<=e.length;)if((l===e.length||"lineEnding"===e[l][1].type)&&"data"===e[l-1][1].type){for(r=e[l-1][1],o=(n=t.sliceStream(r)).length,s=-1,a=0,u=void 0;o--;)if("string"==typeof(i=n[o])){for(s=i.length;32===i.charCodeAt(s-1);)a++,s--;if(s)break;s=-1}else if(-2===i)u=!0,a++;else if(-1!==i){o++;break}a&&(c={type:l===e.length||u||a<2?"lineSuffix":"hardBreakTrailing",start:{line:r.end.line,column:r.end.column-a,offset:r.end.offset-a,_index:r.start._index+o,_bufferIndex:o?s:r.start._bufferIndex+s},end:Z(r.end)},r.end=Z(c.start),r.start.offset===r.end.offset?L(r,c):(e.splice(l,0,["enter",c,t],["exit",c,t]),l+=2)),l++}return e}var le={resolveAll:ue()},fe=se,he=oe,de=Object.defineProperty({resolver:le,string:fe,text:he},"__esModule",{value:!0});var pe=function(e){return null==e?[]:"length"in e?e:[e]};function ge(e,t){var n,r,i,o;for(n in t)for(o in r=I.call(e,n)?e[n]:e[n]={},i=t[n])r[o]=me(pe(i[o]),I.call(r,o)?r[o]:[])}function me(e,t){for(var n=-1,r=[];++n<e.length;)("after"===e[n].add?t:r).push(e[n]);return J(t,0,0,r),t}var ve=function(e){for(var t={},n=-1;++n<e.length;)ge(t,e[n]);return t};var ye=function(e,t){return e.length?(J(e,e.length,0,t),e):t};var xe=function(e,t,n){for(var r,i=[],o=-1;++o<e.length;)(r=e[o].resolveAll)&&i.indexOf(r)<0&&(t=r(t,n),i.push(r));return t};var ke=function(e){for(var t,n,r,i=-1,o=[];++i<e.length;){if("string"==typeof(t=e[i]))n=t;else if(-5===t)n="\r";else if(-4===t)n="\n";else if(-3===t)n="\r\n";else if(-2===t)n="\t";else if(-1===t){if(r)continue;n=" "}else n=O(t);r=-2===t,o.push(n)}return o.join("")};var be=function(e,t){var n,r=t.start._index,i=t.start._bufferIndex,o=t.end._index,s=t.end._bufferIndex;return r===o?n=[e[r].slice(i,s)]:(n=e.slice(r,o),i>-1&&(n[0]=n[0].slice(i)),s>0&&n.push(e[o].slice(0,s))),n};var we=function(e,t,n){var r=n?Z(n):{line:1,column:1,offset:0},i={},o=[],s=[],a=[],u={consume:function(e){N(e)?(r.line++,r.column=1,r.offset+=-3===e?2:1,y()):-1!==e&&(r.column++,r.offset++);r._bufferIndex<0?r._index++:(r._bufferIndex++,r._bufferIndex===s[r._index].length&&(r._bufferIndex=-1,r._index++));c.previous=e},enter:function(e,t){var n=t||{};return n.type=e,n.start=h(),c.events.push(["enter",n,c]),a.push(n),n},exit:function(e){var t=a.pop();return t.end=h(),c.events.push(["exit",t,c]),t},attempt:m((function(e,t){v(e,t.from)})),check:m(g),interrupt:m(g,{interrupt:!0}),lazy:m(g,{lazy:!0})},c={previous:null,events:[],parser:e,sliceStream:f,sliceSerialize:function(e){return ke(f(e))},now:h,defineSkip:function(e){i[e.line]=e.column,y()},write:function(e){if(s=ye(s,e),d(),null!==s[s.length-1])return[];return v(t,0),c.events=xe(o,c.events,c),c.events}},l=t.tokenize.call(c,u);return t.resolveAll&&o.push(t),r._index=0,r._bufferIndex=-1,c;function f(e){return be(s,e)}function h(){return Z(r)}function d(){for(var e,t;r._index<s.length;)if("string"==typeof(t=s[r._index]))for(e=r._index,r._bufferIndex<0&&(r._bufferIndex=0);r._index===e&&r._bufferIndex<t.length;)p(t.charCodeAt(r._bufferIndex));else p(t)}function p(e){l=l(e)}function g(e,t){t.restore()}function m(e,t){return function(n,i,o){var s,l,f,d;return n.tokenize||"length"in n?p(pe(n)):function(e){if(e in n||null in n)return p(n.null?pe(n[e]).concat(pe(n.null)):n[e])(e);return o(e)};function p(e){return s=e,g(e[l=0])}function g(e){return function(n){d=function(){var e=h(),t=c.previous,n=c.currentConstruct,i=c.events.length,o=Array.from(a);return{restore:s,from:i};function s(){r=e,c.previous=t,c.currentConstruct=n,c.events.length=i,a=o,y()}}(),f=e,e.partial||(c.currentConstruct=e);if(e.name&&c.parser.constructs.disable.null.indexOf(e.name)>-1)return v();return e.tokenize.call(t?L({},c,t):c,u,m,v)(n)}}function m(t){return e(f,d),i}function v(e){return d.restore(),++l<s.length?g(s[l]):o}}}function v(e,t){e.resolveAll&&o.indexOf(e)<0&&o.push(e),e.resolve&&J(c.events,t,c.events.length-t,e.resolve(c.events.slice(t),c)),e.resolveTo&&(c.events=e.resolveTo(c.events,c))}function y(){r.line in i&&r.column<2&&(r.column=i[r.line],r.offset+=i[r.line]-1)}};var Se=function(e){return e<0||32===e};var Ee=function(e){return function(t){return e.test(O(t))}},Ce=Ee(/[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/),Ae=Ee(/\s/);var Te=function(e){return null===e||Se(e)||Ae(e)?1:Ce(e)?2:void 0};var qe=function(e,t){return e.column+=t,e.offset+=t,e._bufferIndex+=t,e};var De={name:"attention",tokenize:function(e,t){var n,r=Te(this.previous);return function(t){return e.enter("attentionSequence"),n=t,i(t)};function i(o){var s,a,u,c;return o===n?(e.consume(o),i):(s=e.exit("attentionSequence"),u=!(a=Te(o))||2===a&&r,c=!r||2===r&&a,s._open=42===n?u:u&&(r||!c),s._close=42===n?c:c&&(a||!u),t(o))}},resolveAll:function(e,t){var n,r,i,o,s,a,u,c,l=-1;for(;++l<e.length;)if("enter"===e[l][0]&&"attentionSequence"===e[l][1].type&&e[l][1]._close)for(n=l;n--;)if("exit"===e[n][0]&&"attentionSequence"===e[n][1].type&&e[n][1]._open&&t.sliceSerialize(e[n][1]).charCodeAt(0)===t.sliceSerialize(e[l][1]).charCodeAt(0)){if((e[n][1]._close||e[l][1]._open)&&(e[l][1].end.offset-e[l][1].start.offset)%3&&!((e[n][1].end.offset-e[n][1].start.offset+e[l][1].end.offset-e[l][1].start.offset)%3))continue;a=e[n][1].end.offset-e[n][1].start.offset>1&&e[l][1].end.offset-e[l][1].start.offset>1?2:1,o={type:a>1?"strongSequence":"emphasisSequence",start:qe(Z(e[n][1].end),-a),end:Z(e[n][1].end)},s={type:a>1?"strongSequence":"emphasisSequence",start:Z(e[l][1].start),end:qe(Z(e[l][1].start),a)},i={type:a>1?"strongText":"emphasisText",start:Z(e[n][1].end),end:Z(e[l][1].start)},r={type:a>1?"strong":"emphasis",start:Z(o.start),end:Z(s.end)},e[n][1].end=Z(o.start),e[l][1].start=Z(s.end),u=[],e[n][1].end.offset-e[n][1].start.offset&&(u=ye(u,[["enter",e[n][1],t],["exit",e[n][1],t]])),u=ye(u,[["enter",r,t],["enter",o,t],["exit",o,t],["enter",i,t]]),u=ye(u,xe(t.parser.constructs.insideSpan.null,e.slice(n+1,l),t)),u=ye(u,[["exit",i,t],["enter",s,t],["exit",s,t],["exit",r,t]]),e[l][1].end.offset-e[l][1].start.offset?(c=2,u=ye(u,[["enter",e[l][1],t],["exit",e[l][1],t]])):c=0,J(e,n-1,l-n+3,u),l=n+u.length-c-2;break}l=-1;for(;++l<e.length;)"attentionSequence"===e[l][1].type&&(e[l][1].type="data");return e}},Fe=Ee(/[A-Za-z]/),Le=Ee(/[\dA-Za-z]/),Ie=Ee(/[#-'*+\--9=?A-Z^-~]/);var Re=function(e){return e<32||127===e};var Oe={name:"autolink",tokenize:function(e,t,n){var r=1;return function(t){return e.enter("autolink"),e.enter("autolinkMarker"),e.consume(t),e.exit("autolinkMarker"),e.enter("autolinkProtocol"),i};function i(t){return Fe(t)?(e.consume(t),o):Ie(t)?u(t):n(t)}function o(e){return 43===e||45===e||46===e||Le(e)?s(e):u(e)}function s(t){return 58===t?(e.consume(t),a):(43===t||45===t||46===t||Le(t))&&r++<32?(e.consume(t),s):u(t)}function a(t){return 62===t?(e.exit("autolinkProtocol"),h(t)):32===t||60===t||Re(t)?n(t):(e.consume(t),a)}function u(t){return 64===t?(e.consume(t),r=0,c):Ie(t)?(e.consume(t),u):n(t)}function c(e){return Le(e)?l(e):n(e)}function l(t){return 46===t?(e.consume(t),r=0,c):62===t?(e.exit("autolinkProtocol").type="autolinkEmail",h(t)):f(t)}function f(t){return(45===t||Le(t))&&r++<63?(e.consume(t),45===t?f:l):n(t)}function h(n){return e.enter("autolinkMarker"),e.consume(n),e.exit("autolinkMarker"),e.exit("autolink"),t}}},Pe={name:"blockQuote",tokenize:function(e,t,n){var r=this;return function(t){if(62===t)return r.containerState.open||(e.enter("blockQuote",{_container:!0}),r.containerState.open=!0),e.enter("blockQuotePrefix"),e.enter("blockQuoteMarker"),e.consume(t),e.exit("blockQuoteMarker"),i;return n(t)};function i(n){return M(n)?(e.enter("blockQuotePrefixWhitespace"),e.consume(n),e.exit("blockQuotePrefixWhitespace"),e.exit("blockQuotePrefix"),t):(e.exit("blockQuotePrefix"),t(n))}},continuation:{tokenize:function(e,t,n){return B(e,e.attempt(Pe,t,n),"linePrefix",this.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:4)}},exit:function(e){e.exit("blockQuote")}};var Ne=Pe,Me=Ee(/[!-/:-@[-`{-~]/);var Be={name:"characterEscape",tokenize:function(e,t,n){return function(t){return e.enter("characterEscape"),e.enter("escapeMarker"),e.consume(t),e.exit("escapeMarker"),r};function r(r){return Me(r)?(e.enter("characterEscapeValue"),e.consume(r),e.exit("characterEscapeValue"),e.exit("characterEscape"),t):n(r)}}},_e={AEli:"Ã",AElig:"Ã",AM:"&",AMP:"&",Aacut:"Ã",Aacute:"Ã",Abreve:"Ä",Acir:"Ã",Acirc:"Ã",Acy:"Ð",Afr:"ð",Agrav:"Ã",Agrave:"Ã",Alpha:"Î",Amacr:"Ä",And:"â©",Aogon:"Ä",Aopf:"ð¸",ApplyFunction:"â¡",Arin:"Ã",Aring:"Ã",Ascr:"ð",Assign:"â",Atild:"Ã",Atilde:"Ã",Aum:"Ã",Auml:"Ã",Backslash:"â",Barv:"â«§",Barwed:"â",Bcy:"Ð",Because:"âµ",Bernoullis:"â¬",Beta:"Î",Bfr:"ð",Bopf:"ð¹",Breve:"Ë",Bscr:"â¬",Bumpeq:"â",CHcy:"Ð§",COP:"Â©",COPY:"Â©",Cacute:"Ä",Cap:"â",CapitalDifferentialD:"â",Cayleys:"â­",Ccaron:"Ä",Ccedi:"Ã",Ccedil:"Ã",Ccirc:"Ä",Cconint:"â°",Cdot:"Ä",Cedilla:"Â¸",CenterDot:"Â·",Cfr:"â­",Chi:"Î§",CircleDot:"â",CircleMinus:"â",CirclePlus:"â",CircleTimes:"â",ClockwiseContourIntegral:"â²",CloseCurlyDoubleQuote:"â",CloseCurlyQuote:"â",Colon:"â·",Colone:"â©´",Congruent:"â¡",Conint:"â¯",ContourIntegral:"â®",Copf:"â",Coproduct:"â",CounterClockwiseContourIntegral:"â³",Cross:"â¨¯",Cscr:"ð",Cup:"â",CupCap:"â",DD:"â",DDotrahd:"â¤",DJcy:"Ð",DScy:"Ð",DZcy:"Ð",Dagger:"â¡",Darr:"â¡",Dashv:"â«¤",Dcaron:"Ä",Dcy:"Ð",Del:"â",Delta:"Î",Dfr:"ð",DiacriticalAcute:"Â´",DiacriticalDot:"Ë",DiacriticalDoubleAcute:"Ë",DiacriticalGrave:"`",DiacriticalTilde:"Ë",Diamond:"â",DifferentialD:"â",Dopf:"ð»",Dot:"Â¨",DotDot:"â",DotEqual:"â",DoubleContourIntegral:"â¯",DoubleDot:"Â¨",DoubleDownArrow:"â",DoubleLeftArrow:"â",DoubleLeftRightArrow:"â",DoubleLeftTee:"â«¤",DoubleLongLeftArrow:"â¸",DoubleLongLeftRightArrow:"âº",DoubleLongRightArrow:"â¹",DoubleRightArrow:"â",DoubleRightTee:"â¨",DoubleUpArrow:"â",DoubleUpDownArrow:"â",DoubleVerticalBar:"â¥",DownArrow:"â",DownArrowBar:"â¤",DownArrowUpArrow:"âµ",DownBreve:"Ì",DownLeftRightVector:"â¥",DownLeftTeeVector:"â¥",DownLeftVector:"â½",DownLeftVectorBar:"â¥",DownRightTeeVector:"â¥",DownRightVector:"â",DownRightVectorBar:"â¥",DownTee:"â¤",DownTeeArrow:"â§",Downarrow:"â",Dscr:"ð",Dstrok:"Ä",ENG:"Å",ET:"Ã",ETH:"Ã",Eacut:"Ã",Eacute:"Ã",Ecaron:"Ä",Ecir:"Ã",Ecirc:"Ã",Ecy:"Ð­",Edot:"Ä",Efr:"ð",Egrav:"Ã",Egrave:"Ã",Element:"â",Emacr:"Ä",EmptySmallSquare:"â»",EmptyVerySmallSquare:"â«",Eogon:"Ä",Eopf:"ð¼",Epsilon:"Î",Equal:"â©µ",EqualTilde:"â",Equilibrium:"â",Escr:"â°",Esim:"â©³",Eta:"Î",Eum:"Ã",Euml:"Ã",Exists:"â",ExponentialE:"â",Fcy:"Ð¤",Ffr:"ð",FilledSmallSquare:"â¼",FilledVerySmallSquare:"âª",Fopf:"ð½",ForAll:"â",Fouriertrf:"â±",Fscr:"â±",GJcy:"Ð",G:">",GT:">",Gamma:"Î",Gammad:"Ï",Gbreve:"Ä",Gcedil:"Ä¢",Gcirc:"Ä",Gcy:"Ð",Gdot:"Ä ",Gfr:"ð",Gg:"â",Gopf:"ð¾",GreaterEqual:"â¥",GreaterEqualLess:"â",GreaterFullEqual:"â§",GreaterGreater:"âª¢",GreaterLess:"â·",GreaterSlantEqual:"â©¾",GreaterTilde:"â³",Gscr:"ð¢",Gt:"â«",HARDcy:"Ðª",Hacek:"Ë",Hat:"^",Hcirc:"Ä¤",Hfr:"â",HilbertSpace:"â",Hopf:"â",HorizontalLine:"â",Hscr:"â",Hstrok:"Ä¦",HumpDownHump:"â",HumpEqual:"â",IEcy:"Ð",IJlig:"Ä²",IOcy:"Ð",Iacut:"Ã",Iacute:"Ã",Icir:"Ã",Icirc:"Ã",Icy:"Ð",Idot:"Ä°",Ifr:"â",Igrav:"Ã",Igrave:"Ã",Im:"â",Imacr:"Äª",ImaginaryI:"â",Implies:"â",Int:"â¬",Integral:"â«",Intersection:"â",InvisibleComma:"â£",InvisibleTimes:"â¢",Iogon:"Ä®",Iopf:"ð",Iota:"Î",Iscr:"â",Itilde:"Ä¨",Iukcy:"Ð",Ium:"Ã",Iuml:"Ã",Jcirc:"Ä´",Jcy:"Ð",Jfr:"ð",Jopf:"ð",Jscr:"ð¥",Jsercy:"Ð",Jukcy:"Ð",KHcy:"Ð¥",KJcy:"Ð",Kappa:"Î",Kcedil:"Ä¶",Kcy:"Ð",Kfr:"ð",Kopf:"ð",Kscr:"ð¦",LJcy:"Ð",L:"<",LT:"<",Lacute:"Ä¹",Lambda:"Î",Lang:"âª",Laplacetrf:"â",Larr:"â",Lcaron:"Ä½",Lcedil:"Ä»",Lcy:"Ð",LeftAngleBracket:"â¨",LeftArrow:"â",LeftArrowBar:"â¤",LeftArrowRightArrow:"â",LeftCeiling:"â",LeftDoubleBracket:"â¦",LeftDownTeeVector:"â¥¡",LeftDownVector:"â",LeftDownVectorBar:"â¥",LeftFloor:"â",LeftRightArrow:"â",LeftRightVector:"â¥",LeftTee:"â£",LeftTeeArrow:"â¤",LeftTeeVector:"â¥",LeftTriangle:"â²",LeftTriangleBar:"â§",LeftTriangleEqual:"â´",LeftUpDownVector:"â¥",LeftUpTeeVector:"â¥ ",LeftUpVector:"â¿",LeftUpVectorBar:"â¥",LeftVector:"â¼",LeftVectorBar:"â¥",Leftarrow:"â",Leftrightarrow:"â",LessEqualGreater:"â",LessFullEqual:"â¦",LessGreater:"â¶",LessLess:"âª¡",LessSlantEqual:"â©½",LessTilde:"â²",Lfr:"ð",Ll:"â",Lleftarrow:"â",Lmidot:"Ä¿",LongLeftArrow:"âµ",LongLeftRightArrow:"â·",LongRightArrow:"â¶",Longleftarrow:"â¸",Longleftrightarrow:"âº",Longrightarrow:"â¹",Lopf:"ð",LowerLeftArrow:"â",LowerRightArrow:"â",Lscr:"â",Lsh:"â°",Lstrok:"Å",Lt:"âª",Map:"â¤",Mcy:"Ð",MediumSpace:"â",Mellintrf:"â³",Mfr:"ð",MinusPlus:"â",Mopf:"ð",Mscr:"â³",Mu:"Î",NJcy:"Ð",Nacute:"Å",Ncaron:"Å",Ncedil:"Å",Ncy:"Ð",NegativeMediumSpace:"â",NegativeThickSpace:"â",NegativeThinSpace:"â",NegativeVeryThinSpace:"â",NestedGreaterGreater:"â«",NestedLessLess:"âª",NewLine:"\n",Nfr:"ð",NoBreak:"â ",NonBreakingSpace:"Â ",Nopf:"â",Not:"â«¬",NotCongruent:"â¢",NotCupCap:"â­",NotDoubleVerticalBar:"â¦",NotElement:"â",NotEqual:"â ",NotEqualTilde:"âÌ¸",NotExists:"â",NotGreater:"â¯",NotGreaterEqual:"â±",NotGreaterFullEqual:"â§Ì¸",NotGreaterGreater:"â«Ì¸",NotGreaterLess:"â¹",NotGreaterSlantEqual:"â©¾Ì¸",NotGreaterTilde:"âµ",NotHumpDownHump:"âÌ¸",NotHumpEqual:"âÌ¸",NotLeftTriangle:"âª",NotLeftTriangleBar:"â§Ì¸",NotLeftTriangleEqual:"â¬",NotLess:"â®",NotLessEqual:"â°",NotLessGreater:"â¸",NotLessLess:"âªÌ¸",NotLessSlantEqual:"â©½Ì¸",NotLessTilde:"â´",NotNestedGreaterGreater:"âª¢Ì¸",NotNestedLessLess:"âª¡Ì¸",NotPrecedes:"â",NotPrecedesEqual:"âª¯Ì¸",NotPrecedesSlantEqual:"â ",NotReverseElement:"â",NotRightTriangle:"â«",NotRightTriangleBar:"â§Ì¸",NotRightTriangleEqual:"â­",NotSquareSubset:"âÌ¸",NotSquareSubsetEqual:"â¢",NotSquareSuperset:"âÌ¸",NotSquareSupersetEqual:"â£",NotSubset:"ââ",NotSubsetEqual:"â",NotSucceeds:"â",NotSucceedsEqual:"âª°Ì¸",NotSucceedsSlantEqual:"â¡",NotSucceedsTilde:"â¿Ì¸",NotSuperset:"ââ",NotSupersetEqual:"â",NotTilde:"â",NotTildeEqual:"â",NotTildeFullEqual:"â",NotTildeTilde:"â",NotVerticalBar:"â¤",Nscr:"ð©",Ntild:"Ã",Ntilde:"Ã",Nu:"Î",OElig:"Å",Oacut:"Ã",Oacute:"Ã",Ocir:"Ã",Ocirc:"Ã",Ocy:"Ð",Odblac:"Å",Ofr:"ð",Ograv:"Ã",Ograve:"Ã",Omacr:"Å",Omega:"Î©",Omicron:"Î",Oopf:"ð",OpenCurlyDoubleQuote:"â",OpenCurlyQuote:"â",Or:"â©",Oscr:"ðª",Oslas:"Ã",Oslash:"Ã",Otild:"Ã",Otilde:"Ã",Otimes:"â¨·",Oum:"Ã",Ouml:"Ã",OverBar:"â¾",OverBrace:"â",OverBracket:"â´",OverParenthesis:"â",PartialD:"â",Pcy:"Ð",Pfr:"ð",Phi:"Î¦",Pi:"Î ",PlusMinus:"Â±",Poincareplane:"â",Popf:"â",Pr:"âª»",Precedes:"âº",PrecedesEqual:"âª¯",PrecedesSlantEqual:"â¼",PrecedesTilde:"â¾",Prime:"â³",Product:"â",Proportion:"â·",Proportional:"â",Pscr:"ð«",Psi:"Î¨",QUO:'"',QUOT:'"',Qfr:"ð",Qopf:"â",Qscr:"ð¬",RBarr:"â¤",RE:"Â®",REG:"Â®",Racute:"Å",Rang:"â«",Rarr:"â ",Rarrtl:"â¤",Rcaron:"Å",Rcedil:"Å",Rcy:"Ð ",Re:"â",ReverseElement:"â",ReverseEquilibrium:"â",ReverseUpEquilibrium:"â¥¯",Rfr:"â",Rho:"Î¡",RightAngleBracket:"â©",RightArrow:"â",RightArrowBar:"â¥",RightArrowLeftArrow:"â",RightCeiling:"â",RightDoubleBracket:"â§",RightDownTeeVector:"â¥",RightDownVector:"â",RightDownVectorBar:"â¥",RightFloor:"â",RightTee:"â¢",RightTeeArrow:"â¦",RightTeeVector:"â¥",RightTriangle:"â³",RightTriangleBar:"â§",RightTriangleEqual:"âµ",RightUpDownVector:"â¥",RightUpTeeVector:"â¥",RightUpVector:"â¾",RightUpVectorBar:"â¥",RightVector:"â",RightVectorBar:"â¥",Rightarrow:"â",Ropf:"â",RoundImplies:"â¥°",Rrightarrow:"â",Rscr:"â",Rsh:"â±",RuleDelayed:"â§´",SHCHcy:"Ð©",SHcy:"Ð¨",SOFTcy:"Ð¬",Sacute:"Å",Sc:"âª¼",Scaron:"Å ",Scedil:"Å",Scirc:"Å",Scy:"Ð¡",Sfr:"ð",ShortDownArrow:"â",ShortLeftArrow:"â",ShortRightArrow:"â",ShortUpArrow:"â",Sigma:"Î£",SmallCircle:"â",Sopf:"ð",Sqrt:"â",Square:"â¡",SquareIntersection:"â",SquareSubset:"â",SquareSubsetEqual:"â",SquareSuperset:"â",SquareSupersetEqual:"â",SquareUnion:"â",Sscr:"ð®",Star:"â",Sub:"â",Subset:"â",SubsetEqual:"â",Succeeds:"â»",SucceedsEqual:"âª°",SucceedsSlantEqual:"â½",SucceedsTilde:"â¿",SuchThat:"â",Sum:"â",Sup:"â",Superset:"â",SupersetEqual:"â",Supset:"â",THOR:"Ã",THORN:"Ã",TRADE:"â¢",TSHcy:"Ð",TScy:"Ð¦",Tab:"\t",Tau:"Î¤",Tcaron:"Å¤",Tcedil:"Å¢",Tcy:"Ð¢",Tfr:"ð",Therefore:"â´",Theta:"Î",ThickSpace:"ââ",ThinSpace:"â",Tilde:"â¼",TildeEqual:"â",TildeFullEqual:"â",TildeTilde:"â",Topf:"ð",TripleDot:"â",Tscr:"ð¯",Tstrok:"Å¦",Uacut:"Ã",Uacute:"Ã",Uarr:"â",Uarrocir:"â¥",Ubrcy:"Ð",Ubreve:"Å¬",Ucir:"Ã",Ucirc:"Ã",Ucy:"Ð£",Udblac:"Å°",Ufr:"ð",Ugrav:"Ã",Ugrave:"Ã",Umacr:"Åª",UnderBar:"_",UnderBrace:"â",UnderBracket:"âµ",UnderParenthesis:"â",Union:"â",UnionPlus:"â",Uogon:"Å²",Uopf:"ð",UpArrow:"â",UpArrowBar:"â¤",UpArrowDownArrow:"â",UpDownArrow:"â",UpEquilibrium:"â¥®",UpTee:"â¥",UpTeeArrow:"â¥",Uparrow:"â",Updownarrow:"â",UpperLeftArrow:"â",UpperRightArrow:"â",Upsi:"Ï",Upsilon:"Î¥",Uring:"Å®",Uscr:"ð°",Utilde:"Å¨",Uum:"Ã",Uuml:"Ã",VDash:"â«",Vbar:"â««",Vcy:"Ð",Vdash:"â©",Vdashl:"â«¦",Vee:"â",Verbar:"â",Vert:"â",VerticalBar:"â£",VerticalLine:"|",VerticalSeparator:"â",VerticalTilde:"â",VeryThinSpace:"â",Vfr:"ð",Vopf:"ð",Vscr:"ð±",Vvdash:"âª",Wcirc:"Å´",Wedge:"â",Wfr:"ð",Wopf:"ð",Wscr:"ð²",Xfr:"ð",Xi:"Î",Xopf:"ð",Xscr:"ð³",YAcy:"Ð¯",YIcy:"Ð",YUcy:"Ð®",Yacut:"Ã",Yacute:"Ã",Ycirc:"Å¶",Ycy:"Ð«",Yfr:"ð",Yopf:"ð",Yscr:"ð´",Yuml:"Å¸",ZHcy:"Ð",Zacute:"Å¹",Zcaron:"Å½",Zcy:"Ð",Zdot:"Å»",ZeroWidthSpace:"â",Zeta:"Î",Zfr:"â¨",Zopf:"â¤",Zscr:"ðµ",aacut:"Ã¡",aacute:"Ã¡",abreve:"Ä",ac:"â¾",acE:"â¾Ì³",acd:"â¿",acir:"Ã¢",acirc:"Ã¢",acut:"Â´",acute:"Â´",acy:"Ð°",aeli:"Ã¦",aelig:"Ã¦",af:"â¡",afr:"ð",agrav:"Ã ",agrave:"Ã ",alefsym:"âµ",aleph:"âµ",alpha:"Î±",amacr:"Ä",amalg:"â¨¿",am:"&",amp:"&",and:"â§",andand:"â©",andd:"â©",andslope:"â©",andv:"â©",ang:"â ",ange:"â¦¤",angle:"â ",angmsd:"â¡",angmsdaa:"â¦¨",angmsdab:"â¦©",angmsdac:"â¦ª",angmsdad:"â¦«",angmsdae:"â¦¬",angmsdaf:"â¦­",angmsdag:"â¦®",angmsdah:"â¦¯",angrt:"â",angrtvb:"â¾",angrtvbd:"â¦",angsph:"â¢",angst:"Ã",angzarr:"â¼",aogon:"Ä",aopf:"ð",ap:"â",apE:"â©°",apacir:"â©¯",ape:"â",apid:"â",apos:"'",approx:"â",approxeq:"â",arin:"Ã¥",aring:"Ã¥",ascr:"ð¶",ast:"*",asymp:"â",asympeq:"â",atild:"Ã£",atilde:"Ã£",aum:"Ã¤",auml:"Ã¤",awconint:"â³",awint:"â¨",bNot:"â«­",backcong:"â",backepsilon:"Ï¶",backprime:"âµ",backsim:"â½",backsimeq:"â",barvee:"â½",barwed:"â",barwedge:"â",bbrk:"âµ",bbrktbrk:"â¶",bcong:"â",bcy:"Ð±",bdquo:"â",becaus:"âµ",because:"âµ",bemptyv:"â¦°",bepsi:"Ï¶",bernou:"â¬",beta:"Î²",beth:"â¶",between:"â¬",bfr:"ð",bigcap:"â",bigcirc:"â¯",bigcup:"â",bigodot:"â¨",bigoplus:"â¨",bigotimes:"â¨",bigsqcup:"â¨",bigstar:"â",bigtriangledown:"â½",bigtriangleup:"â³",biguplus:"â¨",bigvee:"â",bigwedge:"â",bkarow:"â¤",blacklozenge:"â§«",blacksquare:"âª",blacktriangle:"â´",blacktriangledown:"â¾",blacktriangleleft:"â",blacktriangleright:"â¸",blank:"â£",blk12:"â",blk14:"â",blk34:"â",block:"â",bne:"=â¥",bnequiv:"â¡â¥",bnot:"â",bopf:"ð",bot:"â¥",bottom:"â¥",bowtie:"â",boxDL:"â",boxDR:"â",boxDl:"â",boxDr:"â",boxH:"â",boxHD:"â¦",boxHU:"â©",boxHd:"â¤",boxHu:"â§",boxUL:"â",boxUR:"â",boxUl:"â",boxUr:"â",boxV:"â",boxVH:"â¬",boxVL:"â£",boxVR:"â ",boxVh:"â«",boxVl:"â¢",boxVr:"â",boxbox:"â§",boxdL:"â",boxdR:"â",boxdl:"â",boxdr:"â",boxh:"â",boxhD:"â¥",boxhU:"â¨",boxhd:"â¬",boxhu:"â´",boxminus:"â",boxplus:"â",boxtimes:"â ",boxuL:"â",boxuR:"â",boxul:"â",boxur:"â",boxv:"â",boxvH:"âª",boxvL:"â¡",boxvR:"â",boxvh:"â¼",boxvl:"â¤",boxvr:"â",bprime:"âµ",breve:"Ë",brvba:"Â¦",brvbar:"Â¦",bscr:"ð·",bsemi:"â",bsim:"â½",bsime:"â",bsol:"\\",bsolb:"â§",bsolhsub:"â",bull:"â¢",bullet:"â¢",bump:"â",bumpE:"âª®",bumpe:"â",bumpeq:"â",cacute:"Ä",cap:"â©",capand:"â©",capbrcup:"â©",capcap:"â©",capcup:"â©",capdot:"â©",caps:"â©ï¸",caret:"â",caron:"Ë",ccaps:"â©",ccaron:"Ä",ccedi:"Ã§",ccedil:"Ã§",ccirc:"Ä",ccups:"â©",ccupssm:"â©",cdot:"Ä",cedi:"Â¸",cedil:"Â¸",cemptyv:"â¦²",cen:"Â¢",cent:"Â¢",centerdot:"Â·",cfr:"ð ",chcy:"Ñ",check:"â",checkmark:"â",chi:"Ï",cir:"â",cirE:"â§",circ:"Ë",circeq:"â",circlearrowleft:"âº",circlearrowright:"â»",circledR:"Â®",circledS:"â",circledast:"â",circledcirc:"â",circleddash:"â",cire:"â",cirfnint:"â¨",cirmid:"â«¯",cirscir:"â§",clubs:"â£",clubsuit:"â£",colon:":",colone:"â",coloneq:"â",comma:",",commat:"@",comp:"â",compfn:"â",complement:"â",complexes:"â",cong:"â",congdot:"â©­",conint:"â®",copf:"ð",coprod:"â",cop:"Â©",copy:"Â©",copysr:"â",crarr:"âµ",cross:"â",cscr:"ð¸",csub:"â«",csube:"â«",csup:"â«",csupe:"â«",ctdot:"â¯",cudarrl:"â¤¸",cudarrr:"â¤µ",cuepr:"â",cuesc:"â",cularr:"â¶",cularrp:"â¤½",cup:"âª",cupbrcap:"â©",cupcap:"â©",cupcup:"â©",cupdot:"â",cupor:"â©",cups:"âªï¸",curarr:"â·",curarrm:"â¤¼",curlyeqprec:"â",curlyeqsucc:"â",curlyvee:"â",curlywedge:"â",curre:"Â¤",curren:"Â¤",curvearrowleft:"â¶",curvearrowright:"â·",cuvee:"â",cuwed:"â",cwconint:"â²",cwint:"â±",cylcty:"â­",dArr:"â",dHar:"â¥¥",dagger:"â ",daleth:"â¸",darr:"â",dash:"â",dashv:"â£",dbkarow:"â¤",dblac:"Ë",dcaron:"Ä",dcy:"Ð´",dd:"â",ddagger:"â¡",ddarr:"â",ddotseq:"â©·",de:"Â°",deg:"Â°",delta:"Î´",demptyv:"â¦±",dfisht:"â¥¿",dfr:"ð¡",dharl:"â",dharr:"â",diam:"â",diamond:"â",diamondsuit:"â¦",diams:"â¦",die:"Â¨",digamma:"Ï",disin:"â²",div:"Ã·",divid:"Ã·",divide:"Ã·",divideontimes:"â",divonx:"â",djcy:"Ñ",dlcorn:"â",dlcrop:"â",dollar:"$",dopf:"ð",dot:"Ë",doteq:"â",doteqdot:"â",dotminus:"â¸",dotplus:"â",dotsquare:"â¡",doublebarwedge:"â",downarrow:"â",downdownarrows:"â",downharpoonleft:"â",downharpoonright:"â",drbkarow:"â¤",drcorn:"â",drcrop:"â",dscr:"ð¹",dscy:"Ñ",dsol:"â§¶",dstrok:"Ä",dtdot:"â±",dtri:"â¿",dtrif:"â¾",duarr:"âµ",duhar:"â¥¯",dwangle:"â¦¦",dzcy:"Ñ",dzigrarr:"â¿",eDDot:"â©·",eDot:"â",eacut:"Ã©",eacute:"Ã©",easter:"â©®",ecaron:"Ä",ecir:"Ãª",ecirc:"Ãª",ecolon:"â",ecy:"Ñ",edot:"Ä",ee:"â",efDot:"â",efr:"ð¢",eg:"âª",egrav:"Ã¨",egrave:"Ã¨",egs:"âª",egsdot:"âª",el:"âª",elinters:"â§",ell:"â",els:"âª",elsdot:"âª",emacr:"Ä",empty:"â",emptyset:"â",emptyv:"â",emsp13:"â",emsp14:"â",emsp:"â",eng:"Å",ensp:"â",eogon:"Ä",eopf:"ð",epar:"â",eparsl:"â§£",eplus:"â©±",epsi:"Îµ",epsilon:"Îµ",epsiv:"Ïµ",eqcirc:"â",eqcolon:"â",eqsim:"â",eqslantgtr:"âª",eqslantless:"âª",equals:"=",equest:"â",equiv:"â¡",equivDD:"â©¸",eqvparsl:"â§¥",erDot:"â",erarr:"â¥±",escr:"â¯",esdot:"â",esim:"â",eta:"Î·",et:"Ã°",eth:"Ã°",eum:"Ã«",euml:"Ã«",euro:"â¬",excl:"!",exist:"â",expectation:"â°",exponentiale:"â",fallingdotseq:"â",fcy:"Ñ",female:"â",ffilig:"ï¬",fflig:"ï¬",ffllig:"ï¬",ffr:"ð£",filig:"ï¬",fjlig:"fj",flat:"â­",fllig:"ï¬",fltns:"â±",fnof:"Æ",fopf:"ð",forall:"â",fork:"â",forkv:"â«",fpartint:"â¨",frac1:"Â¼",frac12:"Â½",frac13:"â",frac14:"Â¼",frac15:"â",frac16:"â",frac18:"â",frac23:"â",frac25:"â",frac3:"Â¾",frac34:"Â¾",frac35:"â",frac38:"â",frac45:"â",frac56:"â",frac58:"â",frac78:"â",frasl:"â",frown:"â¢",fscr:"ð»",gE:"â§",gEl:"âª",gacute:"Çµ",gamma:"Î³",gammad:"Ï",gap:"âª",gbreve:"Ä",gcirc:"Ä",gcy:"Ð³",gdot:"Ä¡",ge:"â¥",gel:"â",geq:"â¥",geqq:"â§",geqslant:"â©¾",ges:"â©¾",gescc:"âª©",gesdot:"âª",gesdoto:"âª",gesdotol:"âª",gesl:"âï¸",gesles:"âª",gfr:"ð¤",gg:"â«",ggg:"â",gimel:"â·",gjcy:"Ñ",gl:"â·",glE:"âª",gla:"âª¥",glj:"âª¤",gnE:"â©",gnap:"âª",gnapprox:"âª",gne:"âª",gneq:"âª",gneqq:"â©",gnsim:"â§",gopf:"ð",grave:"`",gscr:"â",gsim:"â³",gsime:"âª",gsiml:"âª",g:">",gt:">",gtcc:"âª§",gtcir:"â©º",gtdot:"â",gtlPar:"â¦",gtquest:"â©¼",gtrapprox:"âª",gtrarr:"â¥¸",gtrdot:"â",gtreqless:"â",gtreqqless:"âª",gtrless:"â·",gtrsim:"â³",gvertneqq:"â©ï¸",gvnE:"â©ï¸",hArr:"â",hairsp:"â",half:"Â½",hamilt:"â",hardcy:"Ñ",harr:"â",harrcir:"â¥",harrw:"â­",hbar:"â",hcirc:"Ä¥",hearts:"â¥",heartsuit:"â¥",hellip:"â¦",hercon:"â¹",hfr:"ð¥",hksearow:"â¤¥",hkswarow:"â¤¦",hoarr:"â¿",homtht:"â»",hookleftarrow:"â©",hookrightarrow:"âª",hopf:"ð",horbar:"â",hscr:"ð½",hslash:"â",hstrok:"Ä§",hybull:"â",hyphen:"â",iacut:"Ã­",iacute:"Ã­",ic:"â£",icir:"Ã®",icirc:"Ã®",icy:"Ð¸",iecy:"Ðµ",iexc:"Â¡",iexcl:"Â¡",iff:"â",ifr:"ð¦",igrav:"Ã¬",igrave:"Ã¬",ii:"â",iiiint:"â¨",iiint:"â­",iinfin:"â§",iiota:"â©",ijlig:"Ä³",imacr:"Ä«",image:"â",imagline:"â",imagpart:"â",imath:"Ä±",imof:"â·",imped:"Æµ",in:"â",incare:"â",infin:"â",infintie:"â§",inodot:"Ä±",int:"â«",intcal:"âº",integers:"â¤",intercal:"âº",intlarhk:"â¨",intprod:"â¨¼",iocy:"Ñ",iogon:"Ä¯",iopf:"ð",iota:"Î¹",iprod:"â¨¼",iques:"Â¿",iquest:"Â¿",iscr:"ð¾",isin:"â",isinE:"â¹",isindot:"âµ",isins:"â´",isinsv:"â³",isinv:"â",it:"â¢",itilde:"Ä©",iukcy:"Ñ",ium:"Ã¯",iuml:"Ã¯",jcirc:"Äµ",jcy:"Ð¹",jfr:"ð§",jmath:"È·",jopf:"ð",jscr:"ð¿",jsercy:"Ñ",jukcy:"Ñ",kappa:"Îº",kappav:"Ï°",kcedil:"Ä·",kcy:"Ðº",kfr:"ð¨",kgreen:"Ä¸",khcy:"Ñ",kjcy:"Ñ",kopf:"ð",kscr:"ð",lAarr:"â",lArr:"â",lAtail:"â¤",lBarr:"â¤",lE:"â¦",lEg:"âª",lHar:"â¥¢",lacute:"Äº",laemptyv:"â¦´",lagran:"â",lambda:"Î»",lang:"â¨",langd:"â¦",langle:"â¨",lap:"âª",laqu:"Â«",laquo:"Â«",larr:"â",larrb:"â¤",larrbfs:"â¤",larrfs:"â¤",larrhk:"â©",larrlp:"â«",larrpl:"â¤¹",larrsim:"â¥³",larrtl:"â¢",lat:"âª«",latail:"â¤",late:"âª­",lates:"âª­ï¸",lbarr:"â¤",lbbrk:"â²",lbrace:"{",lbrack:"[",lbrke:"â¦",lbrksld:"â¦",lbrkslu:"â¦",lcaron:"Ä¾",lcedil:"Ä¼",lceil:"â",lcub:"{",lcy:"Ð»",ldca:"â¤¶",ldquo:"â",ldquor:"â",ldrdhar:"â¥§",ldrushar:"â¥",ldsh:"â²",le:"â¤",leftarrow:"â",leftarrowtail:"â¢",leftharpoondown:"â½",leftharpoonup:"â¼",leftleftarrows:"â",leftrightarrow:"â",leftrightarrows:"â",leftrightharpoons:"â",leftrightsquigarrow:"â­",leftthreetimes:"â",leg:"â",leq:"â¤",leqq:"â¦",leqslant:"â©½",les:"â©½",lescc:"âª¨",lesdot:"â©¿",lesdoto:"âª",lesdotor:"âª",lesg:"âï¸",lesges:"âª",lessapprox:"âª",lessdot:"â",lesseqgtr:"â",lesseqqgtr:"âª",lessgtr:"â¶",lesssim:"â²",lfisht:"â¥¼",lfloor:"â",lfr:"ð©",lg:"â¶",lgE:"âª",lhard:"â½",lharu:"â¼",lharul:"â¥ª",lhblk:"â",ljcy:"Ñ",ll:"âª",llarr:"â",llcorner:"â",llhard:"â¥«",lltri:"âº",lmidot:"Å",lmoust:"â°",lmoustache:"â°",lnE:"â¨",lnap:"âª",lnapprox:"âª",lne:"âª",lneq:"âª",lneqq:"â¨",lnsim:"â¦",loang:"â¬",loarr:"â½",lobrk:"â¦",longleftarrow:"âµ",longleftrightarrow:"â·",longmapsto:"â¼",longrightarrow:"â¶",looparrowleft:"â«",looparrowright:"â¬",lopar:"â¦",lopf:"ð",loplus:"â¨­",lotimes:"â¨´",lowast:"â",lowbar:"_",loz:"â",lozenge:"â",lozf:"â§«",lpar:"(",lparlt:"â¦",lrarr:"â",lrcorner:"â",lrhar:"â",lrhard:"â¥­",lrm:"â",lrtri:"â¿",lsaquo:"â¹",lscr:"ð",lsh:"â°",lsim:"â²",lsime:"âª",lsimg:"âª",lsqb:"[",lsquo:"â",lsquor:"â",lstrok:"Å",l:"<",lt:"<",ltcc:"âª¦",ltcir:"â©¹",ltdot:"â",lthree:"â",ltimes:"â",ltlarr:"â¥¶",ltquest:"â©»",ltrPar:"â¦",ltri:"â",ltrie:"â´",ltrif:"â",lurdshar:"â¥",luruhar:"â¥¦",lvertneqq:"â¨ï¸",lvnE:"â¨ï¸",mDDot:"âº",mac:"Â¯",macr:"Â¯",male:"â",malt:"â ",maltese:"â ",map:"â¦",mapsto:"â¦",mapstodown:"â§",mapstoleft:"â¤",mapstoup:"â¥",marker:"â®",mcomma:"â¨©",mcy:"Ð¼",mdash:"â",measuredangle:"â¡",mfr:"ðª",mho:"â§",micr:"Âµ",micro:"Âµ",mid:"â£",midast:"*",midcir:"â«°",middo:"Â·",middot:"Â·",minus:"â",minusb:"â",minusd:"â¸",minusdu:"â¨ª",mlcp:"â«",mldr:"â¦",mnplus:"â",models:"â§",mopf:"ð",mp:"â",mscr:"ð",mstpos:"â¾",mu:"Î¼",multimap:"â¸",mumap:"â¸",nGg:"âÌ¸",nGt:"â«â",nGtv:"â«Ì¸",nLeftarrow:"â",nLeftrightarrow:"â",nLl:"âÌ¸",nLt:"âªâ",nLtv:"âªÌ¸",nRightarrow:"â",nVDash:"â¯",nVdash:"â®",nabla:"â",nacute:"Å",nang:"â â",nap:"â",napE:"â©°Ì¸",napid:"âÌ¸",napos:"Å",napprox:"â",natur:"â®",natural:"â®",naturals:"â",nbs:"Â ",nbsp:"Â ",nbump:"âÌ¸",nbumpe:"âÌ¸",ncap:"â©",ncaron:"Å",ncedil:"Å",ncong:"â",ncongdot:"â©­Ì¸",ncup:"â©",ncy:"Ð½",ndash:"â",ne:"â ",neArr:"â",nearhk:"â¤¤",nearr:"â",nearrow:"â",nedot:"âÌ¸",nequiv:"â¢",nesear:"â¤¨",nesim:"âÌ¸",nexist:"â",nexists:"â",nfr:"ð«",ngE:"â§Ì¸",nge:"â±",ngeq:"â±",ngeqq:"â§Ì¸",ngeqslant:"â©¾Ì¸",nges:"â©¾Ì¸",ngsim:"âµ",ngt:"â¯",ngtr:"â¯",nhArr:"â",nharr:"â®",nhpar:"â«²",ni:"â",nis:"â¼",nisd:"âº",niv:"â",njcy:"Ñ",nlArr:"â",nlE:"â¦Ì¸",nlarr:"â",nldr:"â¥",nle:"â°",nleftarrow:"â",nleftrightarrow:"â®",nleq:"â°",nleqq:"â¦Ì¸",nleqslant:"â©½Ì¸",nles:"â©½Ì¸",nless:"â®",nlsim:"â´",nlt:"â®",nltri:"âª",nltrie:"â¬",nmid:"â¤",nopf:"ð",no:"Â¬",not:"Â¬",notin:"â",notinE:"â¹Ì¸",notindot:"âµÌ¸",notinva:"â",notinvb:"â·",notinvc:"â¶",notni:"â",notniva:"â",notnivb:"â¾",notnivc:"â½",npar:"â¦",nparallel:"â¦",nparsl:"â«½â¥",npart:"âÌ¸",npolint:"â¨",npr:"â",nprcue:"â ",npre:"âª¯Ì¸",nprec:"â",npreceq:"âª¯Ì¸",nrArr:"â",nrarr:"â",nrarrc:"â¤³Ì¸",nrarrw:"âÌ¸",nrightarrow:"â",nrtri:"â«",nrtrie:"â­",nsc:"â",nsccue:"â¡",nsce:"âª°Ì¸",nscr:"ð",nshortmid:"â¤",nshortparallel:"â¦",nsim:"â",nsime:"â",nsimeq:"â",nsmid:"â¤",nspar:"â¦",nsqsube:"â¢",nsqsupe:"â£",nsub:"â",nsubE:"â«Ì¸",nsube:"â",nsubset:"ââ",nsubseteq:"â",nsubseteqq:"â«Ì¸",nsucc:"â",nsucceq:"âª°Ì¸",nsup:"â",nsupE:"â«Ì¸",nsupe:"â",nsupset:"ââ",nsupseteq:"â",nsupseteqq:"â«Ì¸",ntgl:"â¹",ntild:"Ã±",ntilde:"Ã±",ntlg:"â¸",ntriangleleft:"âª",ntrianglelefteq:"â¬",ntriangleright:"â«",ntrianglerighteq:"â­",nu:"Î½",num:"#",numero:"â",numsp:"â",nvDash:"â­",nvHarr:"â¤",nvap:"ââ",nvdash:"â¬",nvge:"â¥â",nvgt:">â",nvinfin:"â§",nvlArr:"â¤",nvle:"â¤â",nvlt:"<â",nvltrie:"â´â",nvrArr:"â¤",nvrtrie:"âµâ",nvsim:"â¼â",nwArr:"â",nwarhk:"â¤£",nwarr:"â",nwarrow:"â",nwnear:"â¤§",oS:"â",oacut:"Ã³",oacute:"Ã³",oast:"â",ocir:"Ã´",ocirc:"Ã´",ocy:"Ð¾",odash:"â",odblac:"Å",odiv:"â¨¸",odot:"â",odsold:"â¦¼",oelig:"Å",ofcir:"â¦¿",ofr:"ð¬",ogon:"Ë",ograv:"Ã²",ograve:"Ã²",ogt:"â§",ohbar:"â¦µ",ohm:"Î©",oint:"â®",olarr:"âº",olcir:"â¦¾",olcross:"â¦»",oline:"â¾",olt:"â§",omacr:"Å",omega:"Ï",omicron:"Î¿",omid:"â¦¶",ominus:"â",oopf:"ð ",opar:"â¦·",operp:"â¦¹",oplus:"â",or:"â¨",orarr:"â»",ord:"Âº",order:"â´",orderof:"â´",ordf:"Âª",ordm:"Âº",origof:"â¶",oror:"â©",orslope:"â©",orv:"â©",oscr:"â´",oslas:"Ã¸",oslash:"Ã¸",osol:"â",otild:"Ãµ",otilde:"Ãµ",otimes:"â",otimesas:"â¨¶",oum:"Ã¶",ouml:"Ã¶",ovbar:"â½",par:"Â¶",para:"Â¶",parallel:"â¥",parsim:"â«³",parsl:"â«½",part:"â",pcy:"Ð¿",percnt:"%",period:".",permil:"â°",perp:"â¥",pertenk:"â±",pfr:"ð­",phi:"Ï",phiv:"Ï",phmmat:"â³",phone:"â",pi:"Ï",pitchfork:"â",piv:"Ï",planck:"â",planckh:"â",plankv:"â",plus:"+",plusacir:"â¨£",plusb:"â",pluscir:"â¨¢",plusdo:"â",plusdu:"â¨¥",pluse:"â©²",plusm:"Â±",plusmn:"Â±",plussim:"â¨¦",plustwo:"â¨§",pm:"Â±",pointint:"â¨",popf:"ð¡",poun:"Â£",pound:"Â£",pr:"âº",prE:"âª³",prap:"âª·",prcue:"â¼",pre:"âª¯",prec:"âº",precapprox:"âª·",preccurlyeq:"â¼",preceq:"âª¯",precnapprox:"âª¹",precneqq:"âªµ",precnsim:"â¨",precsim:"â¾",prime:"â²",primes:"â",prnE:"âªµ",prnap:"âª¹",prnsim:"â¨",prod:"â",profalar:"â®",profline:"â",profsurf:"â",prop:"â",propto:"â",prsim:"â¾",prurel:"â°",pscr:"ð",psi:"Ï",puncsp:"â",qfr:"ð®",qint:"â¨",qopf:"ð¢",qprime:"â",qscr:"ð",quaternions:"â",quatint:"â¨",quest:"?",questeq:"â",quo:'"',quot:'"',rAarr:"â",rArr:"â",rAtail:"â¤",rBarr:"â¤",rHar:"â¥¤",race:"â½Ì±",racute:"Å",radic:"â",raemptyv:"â¦³",rang:"â©",rangd:"â¦",range:"â¦¥",rangle:"â©",raqu:"Â»",raquo:"Â»",rarr:"â",rarrap:"â¥µ",rarrb:"â¥",rarrbfs:"â¤ ",rarrc:"â¤³",rarrfs:"â¤",rarrhk:"âª",rarrlp:"â¬",rarrpl:"â¥",rarrsim:"â¥´",rarrtl:"â£",rarrw:"â",ratail:"â¤",ratio:"â¶",rationals:"â",rbarr:"â¤",rbbrk:"â³",rbrace:"}",rbrack:"]",rbrke:"â¦",rbrksld:"â¦",rbrkslu:"â¦",rcaron:"Å",rcedil:"Å",rceil:"â",rcub:"}",rcy:"Ñ",rdca:"â¤·",rdldhar:"â¥©",rdquo:"â",rdquor:"â",rdsh:"â³",real:"â",realine:"â",realpart:"â",reals:"â",rect:"â­",re:"Â®",reg:"Â®",rfisht:"â¥½",rfloor:"â",rfr:"ð¯",rhard:"â",rharu:"â",rharul:"â¥¬",rho:"Ï",rhov:"Ï±",rightarrow:"â",rightarrowtail:"â£",rightharpoondown:"â",rightharpoonup:"â",rightleftarrows:"â",rightleftharpoons:"â",rightrightarrows:"â",rightsquigarrow:"â",rightthreetimes:"â",ring:"Ë",risingdotseq:"â",rlarr:"â",rlhar:"â",rlm:"â",rmoust:"â±",rmoustache:"â±",rnmid:"â«®",roang:"â­",roarr:"â¾",robrk:"â§",ropar:"â¦",ropf:"ð£",roplus:"â¨®",rotimes:"â¨µ",rpar:")",rpargt:"â¦",rppolint:"â¨",rrarr:"â",rsaquo:"âº",rscr:"ð",rsh:"â±",rsqb:"]",rsquo:"â",rsquor:"â",rthree:"â",rtimes:"â",rtri:"â¹",rtrie:"âµ",rtrif:"â¸",rtriltri:"â§",ruluhar:"â¥¨",rx:"â",sacute:"Å",sbquo:"â",sc:"â»",scE:"âª´",scap:"âª¸",scaron:"Å¡",sccue:"â½",sce:"âª°",scedil:"Å",scirc:"Å",scnE:"âª¶",scnap:"âªº",scnsim:"â©",scpolint:"â¨",scsim:"â¿",scy:"Ñ",sdot:"â",sdotb:"â¡",sdote:"â©¦",seArr:"â",searhk:"â¤¥",searr:"â",searrow:"â",sec:"Â§",sect:"Â§",semi:";",seswar:"â¤©",setminus:"â",setmn:"â",sext:"â¶",sfr:"ð°",sfrown:"â¢",sharp:"â¯",shchcy:"Ñ",shcy:"Ñ",shortmid:"â£",shortparallel:"â¥",sh:"Â­",shy:"Â­",sigma:"Ï",sigmaf:"Ï",sigmav:"Ï",sim:"â¼",simdot:"â©ª",sime:"â",simeq:"â",simg:"âª",simgE:"âª ",siml:"âª",simlE:"âª",simne:"â",simplus:"â¨¤",simrarr:"â¥²",slarr:"â",smallsetminus:"â",smashp:"â¨³",smeparsl:"â§¤",smid:"â£",smile:"â£",smt:"âªª",smte:"âª¬",smtes:"âª¬ï¸",softcy:"Ñ",sol:"/",solb:"â§",solbar:"â¿",sopf:"ð¤",spades:"â ",spadesuit:"â ",spar:"â¥",sqcap:"â",sqcaps:"âï¸",sqcup:"â",sqcups:"âï¸",sqsub:"â",sqsube:"â",sqsubset:"â",sqsubseteq:"â",sqsup:"â",sqsupe:"â",sqsupset:"â",sqsupseteq:"â",squ:"â¡",square:"â¡",squarf:"âª",squf:"âª",srarr:"â",sscr:"ð",ssetmn:"â",ssmile:"â£",sstarf:"â",star:"â",starf:"â",straightepsilon:"Ïµ",straightphi:"Ï",strns:"Â¯",sub:"â",subE:"â«",subdot:"âª½",sube:"â",subedot:"â«",submult:"â«",subnE:"â«",subne:"â",subplus:"âª¿",subrarr:"â¥¹",subset:"â",subseteq:"â",subseteqq:"â«",subsetneq:"â",subsetneqq:"â«",subsim:"â«",subsub:"â«",subsup:"â«",succ:"â»",succapprox:"âª¸",succcurlyeq:"â½",succeq:"âª°",succnapprox:"âªº",succneqq:"âª¶",succnsim:"â©",succsim:"â¿",sum:"â",sung:"âª",sup:"â",sup1:"Â¹",sup2:"Â²",sup3:"Â³",supE:"â«",supdot:"âª¾",supdsub:"â«",supe:"â",supedot:"â«",suphsol:"â",suphsub:"â«",suplarr:"â¥»",supmult:"â«",supnE:"â«",supne:"â",supplus:"â«",supset:"â",supseteq:"â",supseteqq:"â«",supsetneq:"â",supsetneqq:"â«",supsim:"â«",supsub:"â«",supsup:"â«",swArr:"â",swarhk:"â¤¦",swarr:"â",swarrow:"â",swnwar:"â¤ª",szli:"Ã",szlig:"Ã",target:"â",tau:"Ï",tbrk:"â´",tcaron:"Å¥",tcedil:"Å£",tcy:"Ñ",tdot:"â",telrec:"â",tfr:"ð±",there4:"â´",therefore:"â´",theta:"Î¸",thetasym:"Ï",thetav:"Ï",thickapprox:"â",thicksim:"â¼",thinsp:"â",thkap:"â",thksim:"â¼",thor:"Ã¾",thorn:"Ã¾",tilde:"Ë",time:"Ã",times:"Ã",timesb:"â ",timesbar:"â¨±",timesd:"â¨°",tint:"â­",toea:"â¤¨",top:"â¤",topbot:"â¶",topcir:"â«±",topf:"ð¥",topfork:"â«",tosa:"â¤©",tprime:"â´",trade:"â¢",triangle:"âµ",triangledown:"â¿",triangleleft:"â",trianglelefteq:"â´",triangleq:"â",triangleright:"â¹",trianglerighteq:"âµ",tridot:"â¬",trie:"â",triminus:"â¨º",triplus:"â¨¹",trisb:"â§",tritime:"â¨»",trpezium:"â¢",tscr:"ð",tscy:"Ñ",tshcy:"Ñ",tstrok:"Å§",twixt:"â¬",twoheadleftarrow:"â",twoheadrightarrow:"â ",uArr:"â",uHar:"â¥£",uacut:"Ãº",uacute:"Ãº",uarr:"â",ubrcy:"Ñ",ubreve:"Å­",ucir:"Ã»",ucirc:"Ã»",ucy:"Ñ",udarr:"â",udblac:"Å±",udhar:"â¥®",ufisht:"â¥¾",ufr:"ð²",ugrav:"Ã¹",ugrave:"Ã¹",uharl:"â¿",uharr:"â¾",uhblk:"â",ulcorn:"â",ulcorner:"â",ulcrop:"â",ultri:"â¸",umacr:"Å«",um:"Â¨",uml:"Â¨",uogon:"Å³",uopf:"ð¦",uparrow:"â",updownarrow:"â",upharpoonleft:"â¿",upharpoonright:"â¾",uplus:"â",upsi:"Ï",upsih:"Ï",upsilon:"Ï",upuparrows:"â",urcorn:"â",urcorner:"â",urcrop:"â",uring:"Å¯",urtri:"â¹",uscr:"ð",utdot:"â°",utilde:"Å©",utri:"âµ",utrif:"â´",uuarr:"â",uum:"Ã¼",uuml:"Ã¼",uwangle:"â¦§",vArr:"â",vBar:"â«¨",vBarv:"â«©",vDash:"â¨",vangrt:"â¦",varepsilon:"Ïµ",varkappa:"Ï°",varnothing:"â",varphi:"Ï",varpi:"Ï",varpropto:"â",varr:"â",varrho:"Ï±",varsigma:"Ï",varsubsetneq:"âï¸",varsubsetneqq:"â«ï¸",varsupsetneq:"âï¸",varsupsetneqq:"â«ï¸",vartheta:"Ï",vartriangleleft:"â²",vartriangleright:"â³",vcy:"Ð²",vdash:"â¢",vee:"â¨",veebar:"â»",veeeq:"â",vellip:"â®",verbar:"|",vert:"|",vfr:"ð³",vltri:"â²",vnsub:"ââ",vnsup:"ââ",vopf:"ð§",vprop:"â",vrtri:"â³",vscr:"ð",vsubnE:"â«ï¸",vsubne:"âï¸",vsupnE:"â«ï¸",vsupne:"âï¸",vzigzag:"â¦",wcirc:"Åµ",wedbar:"â©",wedge:"â§",wedgeq:"â",weierp:"â",wfr:"ð´",wopf:"ð¨",wp:"â",wr:"â",wreath:"â",wscr:"ð",xcap:"â",xcirc:"â¯",xcup:"â",xdtri:"â½",xfr:"ðµ",xhArr:"âº",xharr:"â·",xi:"Î¾",xlArr:"â¸",xlarr:"âµ",xmap:"â¼",xnis:"â»",xodot:"â¨",xopf:"ð©",xoplus:"â¨",xotime:"â¨",xrArr:"â¹",xrarr:"â¶",xscr:"ð",xsqcup:"â¨",xuplus:"â¨",xutri:"â³",xvee:"â",xwedge:"â",yacut:"Ã½",yacute:"Ã½",yacy:"Ñ",ycirc:"Å·",ycy:"Ñ",ye:"Â¥",yen:"Â¥",yfr:"ð¶",yicy:"Ñ",yopf:"ðª",yscr:"ð",yucy:"Ñ",yum:"Ã¿",yuml:"Ã¿",zacute:"Åº",zcaron:"Å¾",zcy:"Ð·",zdot:"Å¼",zeetrf:"â¨",zeta:"Î¶",zfr:"ð·",zhcy:"Ð¶",zigrarr:"â",zopf:"ð«",zscr:"ð",zwj:"â",zwnj:"â"},ze=function(e){return!!Ve.call(_e,e)&&_e[e]},Ve={}.hasOwnProperty;var Ue=Ee(/\d/),je=Ee(/[\dA-Fa-f]/);function He(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var Ge=He(ze),We={name:"characterReference",tokenize:function(e,t,n){var r,i,o=this,s=0;return function(t){return e.enter("characterReference"),e.enter("characterReferenceMarker"),e.consume(t),e.exit("characterReferenceMarker"),a};function a(t){return 35===t?(e.enter("characterReferenceMarkerNumeric"),e.consume(t),e.exit("characterReferenceMarkerNumeric"),u):(e.enter("characterReferenceValue"),r=31,i=Le,c(t))}function u(t){return 88===t||120===t?(e.enter("characterReferenceMarkerHexadecimal"),e.consume(t),e.exit("characterReferenceMarkerHexadecimal"),e.enter("characterReferenceValue"),r=6,i=je,c):(e.enter("characterReferenceValue"),r=7,i=Ue,c(t))}function c(a){var u;return 59===a&&s?(u=e.exit("characterReferenceValue"),i!==Le||Ge.default(o.sliceSerialize(u))?(e.enter("characterReferenceMarker"),e.consume(a),e.exit("characterReferenceMarker"),e.exit("characterReference"),t):n(a)):i(a)&&s++<r?(e.consume(a),c):n(a)}}};var Ye={name:"codeFenced",tokenize:function(e,t,n){var r,i=this,o={tokenize:function(e,t,n){var i=0;return B(e,o,"linePrefix",this.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:4);function o(t){return e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),s(t)}function s(t){return t===r?(e.consume(t),i++,s):i<a?n(t):(e.exit("codeFencedFenceSequence"),B(e,u,"whitespace")(t))}function u(r){return null===r||N(r)?(e.exit("codeFencedFence"),t(r)):n(r)}},partial:!0},s=Q(this.events,"linePrefix"),a=0;return function(t){return e.enter("codeFenced"),e.enter("codeFencedFence"),e.enter("codeFencedFenceSequence"),r=t,u(t)};function u(t){return t===r?(e.consume(t),a++,u):(e.exit("codeFencedFenceSequence"),a<3?n(t):B(e,c,"whitespace")(t))}function c(t){return null===t||N(t)?d(t):(e.enter("codeFencedFenceInfo"),e.enter("chunkString",{contentType:"string"}),l(t))}function l(t){return null===t||Se(t)?(e.exit("chunkString"),e.exit("codeFencedFenceInfo"),B(e,f,"whitespace")(t)):96===t&&t===r?n(t):(e.consume(t),l)}function f(t){return null===t||N(t)?d(t):(e.enter("codeFencedFenceMeta"),e.enter("chunkString",{contentType:"string"}),h(t))}function h(t){return null===t||N(t)?(e.exit("chunkString"),e.exit("codeFencedFenceMeta"),d(t)):96===t&&t===r?n(t):(e.consume(t),h)}function d(n){return e.exit("codeFencedFence"),i.interrupt?t(n):p(n)}function p(t){return null===t?m(t):N(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),e.attempt(o,m,s?B(e,p,"linePrefix",s+1):p)):(e.enter("codeFlowValue"),g(t))}function g(t){return null===t||N(t)?(e.exit("codeFlowValue"),p(t)):(e.consume(t),g)}function m(n){return e.exit("codeFenced"),t(n)}},concrete:!0};var Qe={name:"codeIndented",tokenize:function(e,t,n){return e.attempt($e,r,n);function r(n){return null===n?t(n):N(n)?e.attempt($e,r,t)(n):(e.enter("codeFlowValue"),i(n))}function i(t){return null===t||N(t)?(e.exit("codeFlowValue"),r(t)):(e.consume(t),i)}},resolve:function(e,t){var n={type:"codeIndented",start:e[0][1].start,end:e[e.length-1][1].end};return J(e,0,0,[["enter",n,t]]),J(e,e.length,0,[["exit",n,t]]),e}},$e={tokenize:function(e,t,n){var r=this;return B(e,(function i(o){if(N(o))return e.enter("lineEnding"),e.consume(o),e.exit("lineEnding"),B(e,i,"linePrefix",5);return Q(r.events,"linePrefix")<4?n(o):t(o)}),"linePrefix",5)},partial:!0};var Je=function(e,t,n,r,i,o,s,a,u){var c=u||1/0,l=0;return function(t){if(60===t)return e.enter(r),e.enter(i),e.enter(o),e.consume(t),e.exit(o),f;if(Re(t)||41===t)return n(t);return e.enter(r),e.enter(s),e.enter(a),e.enter("chunkString",{contentType:"string"}),p(t)};function f(n){return 62===n?(e.enter(o),e.consume(n),e.exit(o),e.exit(i),e.exit(r),t):(e.enter(a),e.enter("chunkString",{contentType:"string"}),h(n))}function h(t){return 62===t?(e.exit("chunkString"),e.exit(a),f(t)):null===t||60===t||N(t)?n(t):(e.consume(t),92===t?d:h)}function d(t){return 60===t||62===t||92===t?(e.consume(t),h):h(t)}function p(i){return 40===i?++l>c?n(i):(e.consume(i),p):41===i?l--?(e.consume(i),p):(e.exit("chunkString"),e.exit(a),e.exit(s),e.exit(r),t(i)):null===i||Se(i)?l?n(i):(e.exit("chunkString"),e.exit(a),e.exit(s),e.exit(r),t(i)):Re(i)?n(i):(e.consume(i),92===i?g:p)}function g(t){return 40===t||41===t||92===t?(e.consume(t),p):p(t)}};var Ze=function(e,t,n,r,i,o){var s,a=this,u=0;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),e.enter(o),c};function c(f){return null===f||91===f||93===f&&!s||94===f&&!u&&"_hiddenFootnoteSupport"in a.parser.constructs||u>999?n(f):93===f?(e.exit(o),e.enter(i),e.consume(f),e.exit(i),e.exit(r),t):N(f)?(e.enter("lineEnding"),e.consume(f),e.exit("lineEnding"),c):(e.enter("chunkString",{contentType:"string"}),l(f))}function l(t){return null===t||91===t||93===t||N(t)||u++>999?(e.exit("chunkString"),c(t)):(e.consume(t),s=s||!M(t),92===t?f:l)}function f(t){return 91===t||92===t||93===t?(e.consume(t),u++,l):l(t)}};var Ke=function(e,t){var n;return function r(i){if(N(i))return e.enter("lineEnding"),e.consume(i),e.exit("lineEnding"),n=!0,r;if(M(i))return B(e,r,n?"linePrefix":"lineSuffix")(i);return t(i)}};var Xe=function(e,t,n,r,i,o){var s;return function(t){return e.enter(r),e.enter(i),e.consume(t),e.exit(i),s=40===t?41:t,a};function a(n){return n===s?(e.enter(i),e.consume(n),e.exit(i),e.exit(r),t):(e.enter(o),u(n))}function u(t){return t===s?(e.exit(o),a(s)):null===t?n(t):N(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),B(e,u,"linePrefix")):(e.enter("chunkString",{contentType:"string"}),c(t))}function c(t){return t===s||null===t||N(t)?(e.exit("chunkString"),u(t)):(e.consume(t),92===t?l:c)}function l(t){return t===s||92===t?(e.consume(t),c):c(t)}},et={name:"definition",tokenize:function(e,t,n){var r,i=this;return function(t){return e.enter("definition"),Ze.call(i,e,o,n,"definitionLabel","definitionLabelMarker","definitionLabelString")(t)};function o(t){return r=R(i.sliceSerialize(i.events[i.events.length-1][1]).slice(1,-1)),58===t?(e.enter("definitionMarker"),e.consume(t),e.exit("definitionMarker"),Ke(e,Je(e,e.attempt(tt,B(e,s,"whitespace"),B(e,s,"whitespace")),n,"definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString"))):n(t)}function s(o){return null===o||N(o)?(e.exit("definition"),i.parser.defined.indexOf(r)<0&&i.parser.defined.push(r),t(o)):n(o)}}},tt={tokenize:function(e,t,n){return function(t){return Se(t)?Ke(e,r)(t):n(t)};function r(t){return 34===t||39===t||40===t?Xe(e,B(e,i,"whitespace"),n,"definitionTitle","definitionTitleMarker","definitionTitleString")(t):n(t)}function i(e){return null===e||N(e)?t(e):n(e)}},partial:!0};var nt={name:"headingAtx",tokenize:function(e,t,n){var r=this,i=0;return function(t){return e.enter("atxHeading"),e.enter("atxHeadingSequence"),o(t)};function o(a){return 35===a&&i++<6?(e.consume(a),o):null===a||Se(a)?(e.exit("atxHeadingSequence"),r.interrupt?t(a):s(a)):n(a)}function s(n){return 35===n?(e.enter("atxHeadingSequence"),a(n)):null===n||N(n)?(e.exit("atxHeading"),t(n)):M(n)?B(e,s,"whitespace")(n):(e.enter("atxHeadingText"),u(n))}function a(t){return 35===t?(e.consume(t),a):(e.exit("atxHeadingSequence"),s(t))}function u(t){return null===t||35===t||Se(t)?(e.exit("atxHeadingText"),s(t)):(e.consume(t),u)}},resolve:function(e,t){var n,r,i=e.length-2,o=3;"whitespace"===e[o][1].type&&(o+=2);i-2>o&&"whitespace"===e[i][1].type&&(i-=2);"atxHeadingSequence"===e[i][1].type&&(o===i-1||i-4>o&&"whitespace"===e[i-2][1].type)&&(i-=o+1===i?2:4);i>o&&(n={type:"atxHeadingText",start:e[o][1].start,end:e[i][1].end},r={type:"chunkText",start:e[o][1].start,end:e[i][1].end,contentType:"text"},J(e,o,i-o+1,[["enter",n,t],["enter",r,t],["exit",r,t],["exit",n,t]]));return e}};var rt=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"],it=["pre","script","style","textarea"],ot={name:"htmlFlow",tokenize:function(e,t,n){var r,i,o,s,a,u=this;return function(t){return e.enter("htmlFlow"),e.enter("htmlFlowData"),e.consume(t),c};function c(s){return 33===s?(e.consume(s),l):47===s?(e.consume(s),d):63===s?(e.consume(s),r=3,u.interrupt?t:R):Fe(s)?(e.consume(s),o=O(s),i=!0,p):n(s)}function l(i){return 45===i?(e.consume(i),r=2,f):91===i?(e.consume(i),r=5,o="CDATA[",s=0,h):Fe(i)?(e.consume(i),r=4,u.interrupt?t:R):n(i)}function f(r){return 45===r?(e.consume(r),u.interrupt?t:R):n(r)}function h(r){return r===o.charCodeAt(s++)?(e.consume(r),s===o.length?u.interrupt?t:A:h):n(r)}function d(t){return Fe(t)?(e.consume(t),o=O(t),p):n(t)}function p(s){return null===s||47===s||62===s||Se(s)?47!==s&&i&&it.indexOf(o.toLowerCase())>-1?(r=1,u.interrupt?t(s):A(s)):rt.indexOf(o.toLowerCase())>-1?(r=6,47===s?(e.consume(s),g):u.interrupt?t(s):A(s)):(r=7,u.interrupt?n(s):i?v(s):m(s)):45===s||Le(s)?(e.consume(s),o+=O(s),p):n(s)}function g(r){return 62===r?(e.consume(r),u.interrupt?t:A):n(r)}function m(t){return M(t)?(e.consume(t),m):E(t)}function v(t){return 47===t?(e.consume(t),E):58===t||95===t||Fe(t)?(e.consume(t),y):M(t)?(e.consume(t),v):E(t)}function y(t){return 45===t||46===t||58===t||95===t||Le(t)?(e.consume(t),y):x(t)}function x(t){return 61===t?(e.consume(t),k):M(t)?(e.consume(t),x):v(t)}function k(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),a=t,b):M(t)?(e.consume(t),k):(a=void 0,w(t))}function b(t){return t===a?(e.consume(t),S):null===t||N(t)?n(t):(e.consume(t),b)}function w(t){return null===t||34===t||39===t||60===t||61===t||62===t||96===t||Se(t)?x(t):(e.consume(t),w)}function S(e){return 47===e||62===e||M(e)?v(e):n(e)}function E(t){return 62===t?(e.consume(t),C):n(t)}function C(t){return M(t)?(e.consume(t),C):null===t||N(t)?A(t):n(t)}function A(t){return 45===t&&2===r?(e.consume(t),D):60===t&&1===r?(e.consume(t),F):62===t&&4===r?(e.consume(t),P):63===t&&3===r?(e.consume(t),R):93===t&&5===r?(e.consume(t),I):!N(t)||6!==r&&7!==r?null===t||N(t)?T(t):(e.consume(t),A):e.check(st,P,T)(t)}function T(t){return e.exit("htmlFlowData"),q(t)}function q(t){return null===t?B(t):N(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),q):(e.enter("htmlFlowData"),A(t))}function D(t){return 45===t?(e.consume(t),R):A(t)}function F(t){return 47===t?(e.consume(t),o="",L):A(t)}function L(t){return 62===t&&it.indexOf(o.toLowerCase())>-1?(e.consume(t),P):Fe(t)&&o.length<8?(e.consume(t),o+=O(t),L):A(t)}function I(t){return 93===t?(e.consume(t),R):A(t)}function R(t){return 62===t?(e.consume(t),P):A(t)}function P(t){return null===t||N(t)?(e.exit("htmlFlowData"),B(t)):(e.consume(t),P)}function B(n){return e.exit("htmlFlow"),t(n)}},resolveTo:function(e){var t=e.length;for(;t--&&("enter"!==e[t][0]||"htmlFlow"!==e[t][1].type););t>1&&"linePrefix"===e[t-2][1].type&&(e[t][1].start=e[t-2][1].start,e[t+1][1].start=e[t-2][1].start,e.splice(t-2,2));return e},concrete:!0},st={tokenize:function(e,t,n){return function(r){return e.exit("htmlFlowData"),e.enter("lineEndingBlank"),e.consume(r),e.exit("lineEndingBlank"),e.attempt(V,t,n)}},partial:!0};var at={name:"labelEnd",tokenize:function(e,t,n){var r,i,o=this,s=o.events.length;for(;s--;)if(("labelImage"===o.events[s][1].type||"labelLink"===o.events[s][1].type)&&!o.events[s][1]._balanced){r=o.events[s][1];break}return function(t){if(!r)return n(t);return r._inactive?u(t):(i=o.parser.defined.indexOf(R(o.sliceSerialize({start:r.end,end:o.now()})))>-1,e.enter("labelEnd"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelEnd"),a)};function a(n){return 40===n?e.attempt(ut,t,i?t:u)(n):91===n?e.attempt(ct,t,i?e.attempt(lt,t,u):u)(n):i?t(n):u(n)}function u(e){return r._balanced=!0,n(e)}},resolveTo:function(e,t){var n,r,i,o,s,a,u,c=e.length,l=0;for(;c--;)if(o=e[c][1],s){if("link"===o.type||"labelLink"===o.type&&o._inactive)break;"enter"===e[c][0]&&"labelLink"===o.type&&(o._inactive=!0)}else if(a){if("enter"===e[c][0]&&("labelImage"===o.type||"labelLink"===o.type)&&!o._balanced&&(s=c,"labelLink"!==o.type)){l=2;break}}else"labelEnd"===o.type&&(a=c);return n={type:"labelLink"===e[s][1].type?"link":"image",start:Z(e[s][1].start),end:Z(e[e.length-1][1].end)},r={type:"label",start:Z(e[s][1].start),end:Z(e[a][1].end)},i={type:"labelText",start:Z(e[s+l+2][1].end),end:Z(e[a-2][1].start)},u=ye(u=[["enter",n,t],["enter",r,t]],e.slice(s+1,s+l+3)),u=ye(u,[["enter",i,t]]),u=ye(u,xe(t.parser.constructs.insideSpan.null,e.slice(s+l+4,a-3),t)),u=ye(u,[["exit",i,t],e[a-2],e[a-1],["exit",r,t]]),u=ye(u,e.slice(a+1)),u=ye(u,[["exit",n,t]]),J(e,s,e.length,u),e},resolveAll:function(e){var t,n=-1;for(;++n<e.length;)(t=e[n][1])._used||"labelImage"!==t.type&&"labelLink"!==t.type&&"labelEnd"!==t.type||(e.splice(n+1,"labelImage"===t.type?4:2),t.type="data",n++);return e}},ut={tokenize:function(e,t,n){return function(t){return e.enter("resource"),e.enter("resourceMarker"),e.consume(t),e.exit("resourceMarker"),Ke(e,r)};function r(t){return 41===t?s(t):Je(e,i,n,"resourceDestination","resourceDestinationLiteral","resourceDestinationLiteralMarker","resourceDestinationRaw","resourceDestinationString",3)(t)}function i(t){return Se(t)?Ke(e,o)(t):s(t)}function o(t){return 34===t||39===t||40===t?Xe(e,Ke(e,s),n,"resourceTitle","resourceTitleMarker","resourceTitleString")(t):s(t)}function s(r){return 41===r?(e.enter("resourceMarker"),e.consume(r),e.exit("resourceMarker"),e.exit("resource"),t):n(r)}}},ct={tokenize:function(e,t,n){var r=this;return function(t){return Ze.call(r,e,i,n,"reference","referenceMarker","referenceString")(t)};function i(e){return r.parser.defined.indexOf(R(r.sliceSerialize(r.events[r.events.length-1][1]).slice(1,-1)))<0?n(e):t(e)}}},lt={tokenize:function(e,t,n){return function(t){return e.enter("reference"),e.enter("referenceMarker"),e.consume(t),e.exit("referenceMarker"),r};function r(r){return 93===r?(e.enter("referenceMarker"),e.consume(r),e.exit("referenceMarker"),e.exit("reference"),t):n(r)}}};var ft={name:"lineEnding",tokenize:function(e,t){return function(n){return e.enter("lineEnding"),e.consume(n),e.exit("lineEnding"),B(e,t,"linePrefix")}}};var ht={name:"thematicBreak",tokenize:function(e,t,n){var r,i=0;return function(t){return e.enter("thematicBreak"),r=t,o(t)};function o(a){return a===r?(e.enter("thematicBreakSequence"),s(a)):M(a)?B(e,o,"whitespace")(a):i<3||null!==a&&!N(a)?n(a):(e.exit("thematicBreak"),t(a))}function s(t){return t===r?(e.consume(t),i++,s):(e.exit("thematicBreakSequence"),o(t))}}},dt={name:"list",tokenize:function(e,t,n){var r=this,i=Q(r.events,"linePrefix"),o=0;return function(t){var i=r.containerState.type||(42===t||43===t||45===t?"listUnordered":"listOrdered");if("listUnordered"===i?!r.containerState.marker||t===r.containerState.marker:Ue(t)){if(r.containerState.type||(r.containerState.type=i,e.enter(i,{_container:!0})),"listUnordered"===i)return e.enter("listItemPrefix"),42===t||45===t?e.check(ht,n,a)(t):a(t);if(!r.interrupt||49===t)return e.enter("listItemPrefix"),e.enter("listItemValue"),s(t)}return n(t)};function s(t){return Ue(t)&&++o<10?(e.consume(t),s):(!r.interrupt||o<2)&&(r.containerState.marker?t===r.containerState.marker:41===t||46===t)?(e.exit("listItemValue"),a(t)):n(t)}function a(t){return e.enter("listItemMarker"),e.consume(t),e.exit("listItemMarker"),r.containerState.marker=r.containerState.marker||t,e.check(V,r.interrupt?n:u,e.attempt(pt,l,c))}function u(e){return r.containerState.initialBlankLine=!0,i++,l(e)}function c(t){return M(t)?(e.enter("listItemPrefixWhitespace"),e.consume(t),e.exit("listItemPrefixWhitespace"),l):n(t)}function l(n){return r.containerState.size=i+Y(r.sliceStream(e.exit("listItemPrefix"))),t(n)}},continuation:{tokenize:function(e,t,n){var r=this;return r.containerState._closeFlow=void 0,e.check(V,(function(n){return r.containerState.furtherBlankLines=r.containerState.furtherBlankLines||r.containerState.initialBlankLine,B(e,t,"listItemIndent",r.containerState.size+1)(n)}),(function(n){if(r.containerState.furtherBlankLines||!M(n))return r.containerState.furtherBlankLines=r.containerState.initialBlankLine=void 0,i(n);return r.containerState.furtherBlankLines=r.containerState.initialBlankLine=void 0,e.attempt(gt,t,i)(n)}));function i(i){return r.containerState._closeFlow=!0,r.interrupt=void 0,B(e,e.attempt(dt,t,n),"linePrefix",r.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:4)(i)}}},exit:function(e){e.exit(this.containerState.type)}},pt={tokenize:function(e,t,n){var r=this;return B(e,(function(e){return M(e)||!Q(r.events,"listItemPrefixWhitespace")?n(e):t(e)}),"listItemPrefixWhitespace",r.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:5)},partial:!0},gt={tokenize:function(e,t,n){var r=this;return B(e,(function(e){return Q(r.events,"listItemIndent")===r.containerState.size?t(e):n(e)}),"listItemIndent",r.containerState.size+1)},partial:!0};var mt={name:"setextUnderline",tokenize:function(e,t,n){var r,i,o=this,s=o.events.length;for(;s--;)if("lineEnding"!==o.events[s][1].type&&"linePrefix"!==o.events[s][1].type&&"content"!==o.events[s][1].type){i="paragraph"===o.events[s][1].type;break}return function(t){if(!o.lazy&&(o.interrupt||i))return e.enter("setextHeadingLine"),e.enter("setextHeadingLineSequence"),r=t,a(t);return n(t)};function a(t){return t===r?(e.consume(t),a):(e.exit("setextHeadingLineSequence"),B(e,u,"lineSuffix")(t))}function u(r){return null===r||N(r)?(e.exit("setextHeadingLine"),t(r)):n(r)}},resolveTo:function(e,t){var n,r,i,o,s=e.length;for(;s--;)if("enter"===e[s][0]){if("content"===e[s][1].type){n=s;break}"paragraph"===e[s][1].type&&(r=s)}else"content"===e[s][1].type&&e.splice(s,1),i||"definition"!==e[s][1].type||(i=s);o={type:"setextHeading",start:Z(e[r][1].start),end:Z(e[e.length-1][1].end)},e[r][1].type="setextHeadingText",i?(e.splice(r,0,["enter",o,t]),e.splice(i+1,0,["exit",e[n][1],t]),e[n][1].end=Z(e[i][1].end)):e[n][1]=o;return e.push(["exit",o,t]),e}};var vt={38:We,92:Be},yt={"-5":ft,"-4":ft,"-3":ft,33:{name:"labelStartImage",tokenize:function(e,t,n){var r=this;return function(t){return e.enter("labelImage"),e.enter("labelImageMarker"),e.consume(t),e.exit("labelImageMarker"),i};function i(t){return 91===t?(e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelImage"),o):n(t)}function o(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:at.resolveAll},38:We,42:De,60:[Oe,{name:"htmlText",tokenize:function(e,t,n){var r,i,o,s,a=this;return function(t){return e.enter("htmlText"),e.enter("htmlTextData"),e.consume(t),u};function u(t){return 33===t?(e.consume(t),c):47===t?(e.consume(t),w):63===t?(e.consume(t),k):Fe(t)?(e.consume(t),C):n(t)}function c(t){return 45===t?(e.consume(t),l):91===t?(e.consume(t),i="CDATA[",o=0,g):Fe(t)?(e.consume(t),x):n(t)}function l(t){return 45===t?(e.consume(t),f):n(t)}function f(t){return null===t||62===t?n(t):45===t?(e.consume(t),h):d(t)}function h(e){return null===e||62===e?n(e):d(e)}function d(t){return null===t?n(t):45===t?(e.consume(t),p):N(t)?(s=d,R(t)):(e.consume(t),d)}function p(t){return 45===t?(e.consume(t),P):d(t)}function g(t){return t===i.charCodeAt(o++)?(e.consume(t),o===i.length?m:g):n(t)}function m(t){return null===t?n(t):93===t?(e.consume(t),v):N(t)?(s=m,R(t)):(e.consume(t),m)}function v(t){return 93===t?(e.consume(t),y):m(t)}function y(t){return 62===t?P(t):93===t?(e.consume(t),y):m(t)}function x(t){return null===t||62===t?P(t):N(t)?(s=x,R(t)):(e.consume(t),x)}function k(t){return null===t?n(t):63===t?(e.consume(t),b):N(t)?(s=k,R(t)):(e.consume(t),k)}function b(e){return 62===e?P(e):k(e)}function w(t){return Fe(t)?(e.consume(t),S):n(t)}function S(t){return 45===t||Le(t)?(e.consume(t),S):E(t)}function E(t){return N(t)?(s=E,R(t)):M(t)?(e.consume(t),E):P(t)}function C(t){return 45===t||Le(t)?(e.consume(t),C):47===t||62===t||Se(t)?A(t):n(t)}function A(t){return 47===t?(e.consume(t),P):58===t||95===t||Fe(t)?(e.consume(t),T):N(t)?(s=A,R(t)):M(t)?(e.consume(t),A):P(t)}function T(t){return 45===t||46===t||58===t||95===t||Le(t)?(e.consume(t),T):q(t)}function q(t){return 61===t?(e.consume(t),D):N(t)?(s=q,R(t)):M(t)?(e.consume(t),q):A(t)}function D(t){return null===t||60===t||61===t||62===t||96===t?n(t):34===t||39===t?(e.consume(t),r=t,F):N(t)?(s=D,R(t)):M(t)?(e.consume(t),D):(e.consume(t),r=void 0,I)}function F(t){return t===r?(e.consume(t),L):null===t?n(t):N(t)?(s=F,R(t)):(e.consume(t),F)}function L(e){return 62===e||47===e||Se(e)?A(e):n(e)}function I(t){return null===t||34===t||39===t||60===t||61===t||96===t?n(t):62===t||Se(t)?A(t):(e.consume(t),I)}function R(t){return e.exit("htmlTextData"),e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),B(e,O,"linePrefix",a.parser.constructs.disable.null.indexOf("codeIndented")>-1?void 0:4)}function O(t){return e.enter("htmlTextData"),s(t)}function P(r){return 62===r?(e.consume(r),e.exit("htmlTextData"),e.exit("htmlText"),t):n(r)}}}],91:{name:"labelStartLink",tokenize:function(e,t,n){var r=this;return function(t){return e.enter("labelLink"),e.enter("labelMarker"),e.consume(t),e.exit("labelMarker"),e.exit("labelLink"),i};function i(e){return 94===e&&"_hiddenFootnoteSupport"in r.parser.constructs?n(e):t(e)}},resolveAll:at.resolveAll},92:[{name:"hardBreakEscape",tokenize:function(e,t,n){return function(t){return e.enter("hardBreakEscape"),e.enter("escapeMarker"),e.consume(t),r};function r(r){return N(r)?(e.exit("escapeMarker"),e.exit("hardBreakEscape"),t(r)):n(r)}}},Be],93:at,95:De,96:{name:"codeText",tokenize:function(e,t,n){var r,i,o=0;return function(t){return e.enter("codeText"),e.enter("codeTextSequence"),s(t)};function s(t){return 96===t?(e.consume(t),o++,s):(e.exit("codeTextSequence"),a(t))}function a(t){return null===t?n(t):96===t?(i=e.enter("codeTextSequence"),r=0,c(t)):32===t?(e.enter("space"),e.consume(t),e.exit("space"),a):N(t)?(e.enter("lineEnding"),e.consume(t),e.exit("lineEnding"),a):(e.enter("codeTextData"),u(t))}function u(t){return null===t||32===t||96===t||N(t)?(e.exit("codeTextData"),a(t)):(e.consume(t),u)}function c(n){return 96===n?(e.consume(n),r++,c):r===o?(e.exit("codeTextSequence"),e.exit("codeText"),t(n)):(i.type="codeTextData",u(n))}},resolve:function(e){var t,n,r=e.length-4,i=3;if(!("lineEnding"!==e[i][1].type&&"space"!==e[i][1].type||"lineEnding"!==e[r][1].type&&"space"!==e[r][1].type))for(t=i;++t<r;)if("codeTextData"===e[t][1].type){e[r][1].type=e[i][1].type="codeTextPadding",i+=2,r-=2;break}t=i-1,r++;for(;++t<=r;)void 0===n?t!==r&&"lineEnding"!==e[t][1].type&&(n=t):t!==r&&"lineEnding"!==e[t][1].type||(e[n][1].type="codeTextData",t!==n+2&&(e[n][1].end=e[t-1][1].end,e.splice(n+2,t-n-2),r-=t-n-2,t=n+2),n=void 0);return e},previous:function(e){return 96!==e||"characterEscape"===this.events[this.events.length-1][1].type}}},xt={91:et},kt={null:[]},bt={42:dt,43:dt,45:dt,48:dt,49:dt,50:dt,51:dt,52:dt,53:dt,54:dt,55:dt,56:dt,57:dt,62:Ne},wt={35:nt,42:ht,45:[mt,ht],60:ot,61:mt,95:ht,96:Ye,126:Ye},St={"-2":Qe,"-1":Qe,32:Qe},Et={null:[De,de.resolver]},Ct=vt,At=yt,Tt=Object.defineProperty({contentInitial:xt,disable:kt,document:bt,flow:wt,flowInitial:St,insideSpan:Et,string:Ct,text:At},"__esModule",{value:!0});var qt=function(e){var t={defined:[],constructs:ve([Tt].concat(pe((e||{}).extensions))),content:n(z),document:n(W),flow:n(ie),string:n(de.string),text:n(de.text)};return t;function n(e){return function(n){return we(t,e,n)}}},Dt=/[\0\t\n\r]/g;var Ft=function(){var e,t=!0,n=1,r="";return function(i,o,s){var a,u,c,l,f,h=[];i=r+i.toString(o),c=0,r="",t&&(65279===i.charCodeAt(0)&&c++,t=void 0);for(;c<i.length;){if(Dt.lastIndex=c,a=Dt.exec(i),l=a?a.index:i.length,f=i.charCodeAt(l),!a){r=i.slice(c);break}if(10===f&&c===l&&e)h.push(-3),e=void 0;else if(e&&(h.push(-5),e=void 0),c<l&&(h.push(i.slice(c,l)),n+=l-c),0===f)h.push(65533),n++;else if(9===f)for(u=4*Math.ceil(n/4),h.push(-2);n++<u;)h.push(-1);else 10===f?(h.push(-4),n=1):(e=!0,n=1);c=l+1}s&&(e&&h.push(-5),r&&h.push(r),h.push(null));return h}};var Lt=function(e){for(;!X(e););return e},It={}.hasOwnProperty,Rt=function(e){if(!e||"object"!=typeof e)return"";if(It.call(e,"position")||It.call(e,"type"))return Pt(e.position);if(It.call(e,"start")||It.call(e,"end"))return Pt(e);if(It.call(e,"line")||It.call(e,"column"))return Ot(e);return""};function Ot(e){return e&&"object"==typeof e||(e={}),Nt(e.line)+":"+Nt(e.column)}function Pt(e){return e&&"object"==typeof e||(e={}),Ot(e.start)+"-"+Ot(e.end)}function Nt(e){return e&&"number"==typeof e?e:1}function Mt(e,t){var n,r;for(n in t)r=I.call(e,n)?e[n]:e[n]={},"canContainEols"===n||"transforms"===n?e[n]=[].concat(r,t[n]):Object.assign(r,t[n])}var Bt=function(e,t,n){"string"!=typeof t&&(n=t,t=void 0);return function(e){var t=e||{},n=function(e,t){var n=-1;for(;++n<t.length;)Mt(e,t[n]);return e}({transforms:[],canContainEols:["emphasis","fragment","heading","paragraph","strong"],enter:{autolink:c(ce),autolinkProtocol:F,autolinkEmail:F,atxHeading:c(oe),blockQuote:c(ee),characterEscape:F,characterReference:F,codeFenced:c(te),codeFencedFenceInfo:l,codeFencedFenceMeta:l,codeIndented:c(te,l),codeText:c(ne,l),codeTextData:F,data:F,codeFlowValue:F,definition:c(re),definitionDestinationString:l,definitionLabelString:l,definitionTitleString:l,emphasis:c(ie),hardBreakEscape:c(se),hardBreakTrailing:c(se),htmlFlow:c(ae,l),htmlFlowData:F,htmlText:c(ae,l),htmlTextData:F,image:c(ue),label:l,link:c(ce),listItem:c(fe),listItemValue:m,listOrdered:c(le,g),listUnordered:c(le),paragraph:c(he),reference:Q,referenceString:l,resourceDestinationString:l,resourceTitleString:l,setextHeading:c(oe),strong:c(de),thematicBreak:c(ge)},exit:{atxHeading:h(),atxHeadingSequence:C,autolink:h(),autolinkEmail:X,autolinkProtocol:K,blockQuote:h(),characterEscapeValue:O,characterReferenceMarkerHexadecimal:J,characterReferenceMarkerNumeric:J,characterReferenceValue:Z,codeFenced:h(k),codeFencedFence:x,codeFencedFenceInfo:v,codeFencedFenceMeta:y,codeFlowValue:O,codeIndented:h(b),codeText:h(z),codeTextData:O,data:O,definition:h(),definitionDestinationString:E,definitionLabelString:w,definitionTitleString:S,emphasis:h(),hardBreakEscape:h(M),hardBreakTrailing:h(M),htmlFlow:h(B),htmlFlowData:O,htmlText:h(_),htmlTextData:O,image:h(U),label:H,labelText:j,lineEnding:N,link:h(V),listItem:h(),listOrdered:h(),listUnordered:h(),paragraph:h(),referenceString:$,resourceDestinationString:G,resourceTitleString:W,resource:Y,setextHeading:h(D),setextHeadingLineSequence:T,setextHeadingText:A,strong:h(),thematicBreak:h()}},t.mdastExtensions||[]),r={};return i;function i(e){for(var t,r={type:"root",children:[]},i=[],c=[],h=-1,g={stack:[r],tokenStack:i,config:n,enter:f,exit:d,buffer:l,resume:p,setData:s,getData:a};++h<e.length;)"listOrdered"!==e[h][1].type&&"listUnordered"!==e[h][1].type||("enter"===e[h][0]?c.push(h):h=o(e,c.pop(h),h));for(h=-1;++h<e.length;)t=n[e[h][0]],I.call(t,e[h][1].type)&&t[e[h][1].type].call(L({sliceSerialize:e[h][2].sliceSerialize},g),e[h][1]);if(i.length)throw new Error("Cannot close document, a token (`"+i[i.length-1].type+"`, "+Rt({start:i[i.length-1].start,end:i[i.length-1].end})+") is still open");for(r.position={start:u(e.length?e[0][1].start:{line:1,column:1,offset:0}),end:u(e.length?e[e.length-2][1].end:{line:1,column:1,offset:0})},h=-1;++h<n.transforms.length;)r=n.transforms[h](r)||r;return r}function o(e,t,n){for(var r,i,o,s,a,c,l,f=t-1,h=-1,d=!1;++f<=n;)if("listUnordered"===(a=e[f])[1].type||"listOrdered"===a[1].type||"blockQuote"===a[1].type?("enter"===a[0]?h++:h--,l=void 0):"lineEndingBlank"===a[1].type?"enter"===a[0]&&(!r||l||h||c||(c=f),l=void 0):"linePrefix"===a[1].type||"listItemValue"===a[1].type||"listItemMarker"===a[1].type||"listItemPrefix"===a[1].type||"listItemPrefixWhitespace"===a[1].type||(l=void 0),!h&&"enter"===a[0]&&"listItemPrefix"===a[1].type||-1===h&&"exit"===a[0]&&("listUnordered"===a[1].type||"listOrdered"===a[1].type)){if(r){for(i=f,o=void 0;i--;)if("lineEnding"===(s=e[i])[1].type||"lineEndingBlank"===s[1].type){if("exit"===s[0])continue;o&&(e[o][1].type="lineEndingBlank",d=!0),s[1].type="lineEnding",o=i}else if("linePrefix"!==s[1].type&&"blockQuotePrefix"!==s[1].type&&"blockQuotePrefixWhitespace"!==s[1].type&&"blockQuoteMarker"!==s[1].type&&"listItemIndent"!==s[1].type)break;c&&(!o||c<o)&&(r._spread=!0),r.end=u(o?e[o][1].start:a[1].end),e.splice(o||f,0,["exit",r,a[2]]),f++,n++}"listItemPrefix"===a[1].type&&(r={type:"listItem",_spread:!1,start:u(a[1].start)},e.splice(f,0,["enter",r,a[2]]),f++,n++,c=void 0,l=!0)}return e[t][1]._spread=d,n}function s(e,t){r[e]=t}function a(e){return r[e]}function u(e){return{line:e.line,column:e.column,offset:e.offset}}function c(e,t){return n;function n(n){f.call(this,e(n),n),t&&t.call(this,n)}}function l(){this.stack.push({type:"fragment",children:[]})}function f(e,t){return this.stack[this.stack.length-1].children.push(e),this.stack.push(e),this.tokenStack.push(t),e.position={start:u(t.start)},e}function h(e){return t;function t(t){e&&e.call(this,t),d.call(this,t)}}function d(e){var t=this.stack.pop(),n=this.tokenStack.pop();if(!n)throw new Error("Cannot close `"+e.type+"` ("+Rt({start:e.start,end:e.end})+"): itâs not open");if(n.type!==e.type)throw new Error("Cannot close `"+e.type+"` ("+Rt({start:e.start,end:e.end})+"): a different token (`"+n.type+"`, "+Rt({start:n.start,end:n.end})+") is open");return t.position.end=u(e.end),t}function p(){return q(this.stack.pop())}function g(){s("expectingFirstListItemValue",!0)}function m(e){a("expectingFirstListItemValue")&&(this.stack[this.stack.length-2].start=parseInt(this.sliceSerialize(e),10),s("expectingFirstListItemValue"))}function v(){var e=this.resume();this.stack[this.stack.length-1].lang=e}function y(){var e=this.resume();this.stack[this.stack.length-1].meta=e}function x(){a("flowCodeInside")||(this.buffer(),s("flowCodeInside",!0))}function k(){var e=this.resume();this.stack[this.stack.length-1].value=e.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g,""),s("flowCodeInside")}function b(){var e=this.resume();this.stack[this.stack.length-1].value=e}function w(e){var t=this.resume();this.stack[this.stack.length-1].label=t,this.stack[this.stack.length-1].identifier=R(this.sliceSerialize(e)).toLowerCase()}function S(){var e=this.resume();this.stack[this.stack.length-1].title=e}function E(){var e=this.resume();this.stack[this.stack.length-1].url=e}function C(e){this.stack[this.stack.length-1].depth||(this.stack[this.stack.length-1].depth=this.sliceSerialize(e).length)}function A(){s("setextHeadingSlurpLineEnding",!0)}function T(e){this.stack[this.stack.length-1].depth=61===this.sliceSerialize(e).charCodeAt(0)?1:2}function D(){s("setextHeadingSlurpLineEnding")}function F(e){var t=this.stack[this.stack.length-1].children,n=t[t.length-1];n&&"text"===n.type||((n=pe()).position={start:u(e.start)},this.stack[this.stack.length-1].children.push(n)),this.stack.push(n)}function O(e){var t=this.stack.pop();t.value+=this.sliceSerialize(e),t.position.end=u(e.end)}function N(e){var t=this.stack[this.stack.length-1];if(a("atHardBreak"))return t.children[t.children.length-1].position.end=u(e.end),void s("atHardBreak");!a("setextHeadingSlurpLineEnding")&&n.canContainEols.indexOf(t.type)>-1&&(F.call(this,e),O.call(this,e))}function M(){s("atHardBreak",!0)}function B(){var e=this.resume();this.stack[this.stack.length-1].value=e}function _(){var e=this.resume();this.stack[this.stack.length-1].value=e}function z(){var e=this.resume();this.stack[this.stack.length-1].value=e}function V(){var e=this.stack[this.stack.length-1];a("inReference")?(e.type+="Reference",e.referenceType=a("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label,delete e.referenceType),s("referenceType")}function U(){var e=this.stack[this.stack.length-1];a("inReference")?(e.type+="Reference",e.referenceType=a("referenceType")||"shortcut",delete e.url,delete e.title):(delete e.identifier,delete e.label,delete e.referenceType),s("referenceType")}function j(e){this.stack[this.stack.length-2].identifier=R(this.sliceSerialize(e)).toLowerCase()}function H(){var e=this.stack[this.stack.length-1],t=this.resume();this.stack[this.stack.length-1].label=t,s("inReference",!0),"link"===this.stack[this.stack.length-1].type?this.stack[this.stack.length-1].children=e.children:this.stack[this.stack.length-1].alt=t}function G(){var e=this.resume();this.stack[this.stack.length-1].url=e}function W(){var e=this.resume();this.stack[this.stack.length-1].title=e}function Y(){s("inReference")}function Q(){s("referenceType","collapsed")}function $(e){var t=this.resume();this.stack[this.stack.length-1].label=t,this.stack[this.stack.length-1].identifier=R(this.sliceSerialize(e)).toLowerCase(),s("referenceType","full")}function J(e){s("characterReferenceType",e.type)}function Z(e){var t,n,r=this.sliceSerialize(e),i=a("characterReferenceType");i?(t=P(r,"characterReferenceMarkerNumeric"===i?10:16),s("characterReferenceType")):t=ze(r),(n=this.stack.pop()).value+=t,n.position.end=u(e.end)}function K(e){O.call(this,e),this.stack[this.stack.length-1].url=this.sliceSerialize(e)}function X(e){O.call(this,e),this.stack[this.stack.length-1].url="mailto:"+this.sliceSerialize(e)}function ee(){return{type:"blockquote",children:[]}}function te(){return{type:"code",lang:null,meta:null,value:""}}function ne(){return{type:"inlineCode",value:""}}function re(){return{type:"definition",identifier:"",label:null,title:null,url:""}}function ie(){return{type:"emphasis",children:[]}}function oe(){return{type:"heading",depth:void 0,children:[]}}function se(){return{type:"break"}}function ae(){return{type:"html",value:""}}function ue(){return{type:"image",title:null,url:"",alt:null}}function ce(){return{type:"link",title:null,url:"",children:[]}}function le(e){return{type:"list",ordered:"listOrdered"===e.type,start:null,spread:e._spread,children:[]}}function fe(e){return{type:"listItem",spread:e._spread,checked:null,children:[]}}function he(){return{type:"paragraph",children:[]}}function de(){return{type:"strong",children:[]}}function pe(){return{type:"text",value:""}}function ge(){return{type:"thematicBreak"}}}(n)(Lt(qt(n).document().write(Ft()(e,t,!0))))},_t=function(e){var t=this;this.Parser=function(n){return Bt(n,Object.assign({},t.data("settings"),e,{extensions:t.data("micromarkExtensions")||[],mdastExtensions:t.data("fromMarkdownExtensions")||[]}))}};var zt=function(e){if(e)throw e}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */;var Vt=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},Ut=Object.prototype.hasOwnProperty,jt=Object.prototype.toString,Ht=Object.defineProperty,Gt=Object.getOwnPropertyDescriptor,Wt=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===jt.call(e)},Yt=function(e){if(!e||"[object Object]"!==jt.call(e))return!1;var t,n=Ut.call(e,"constructor"),r=e.constructor&&e.constructor.prototype&&Ut.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!n&&!r)return!1;for(t in e);return void 0===t||Ut.call(e,t)},Qt=function(e,t){Ht&&"__proto__"===t.name?Ht(e,t.name,{enumerable:!0,configurable:!0,value:t.newValue,writable:!0}):e[t.name]=t.newValue},$t=function(e,t){if("__proto__"===t){if(!Ut.call(e,t))return;if(Gt)return Gt(e,t).value}return e[t]},Jt=function e(){var t,n,r,i,o,s,a=arguments[0],u=1,c=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[1]||{},u=2),(null==a||"object"!=typeof a&&"function"!=typeof a)&&(a={});u<c;++u)if(null!=(t=arguments[u]))for(n in t)r=$t(a,n),a!==(i=$t(t,n))&&(l&&i&&(Yt(i)||(o=Wt(i)))?(o?(o=!1,s=r&&Wt(r)?r:[]):s=r&&Yt(r)?r:{},Qt(a,{name:n,newValue:e(l,s,i)})):void 0!==i&&Qt(a,{name:n,newValue:i}));return a},Zt=e=>{if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);return null===t||t===Object.prototype},Kt=[].slice,Xt=function(e,t){var n;return function(){var t,o=Kt.call(arguments,0),s=e.length>o.length;s&&o.push(r);try{t=e.apply(null,o)}catch(e){if(s&&n)throw e;return r(e)}s||(t&&"function"==typeof t.then?t.then(i,r):t instanceof Error?r(t):i(t))};function r(){n||(n=!0,t.apply(null,arguments))}function i(e){r(null,e)}};var en=nn;nn.wrap=Xt;var tn=[].slice;function nn(){var e=[],t={run:function(){var t=-1,n=tn.call(arguments,0,-1),r=arguments[arguments.length-1];if("function"!=typeof r)throw new Error("Expected function as last argument, not "+r);function i(o){var s=e[++t],a=tn.call(arguments,0),u=a.slice(1),c=n.length,l=-1;if(o)r(o);else{for(;++l<c;)null!==u[l]&&void 0!==u[l]||(u[l]=n[l]);n=u,s?Xt(s,i).apply(null,n):r.apply(null,[null].concat(n))}}i.apply(null,[null].concat(n))},use:function(n){if("function"!=typeof n)throw new Error("Expected `fn` to be a function, not "+n);return e.push(n),t}};return t}var rn=an;function on(){}on.prototype=Error.prototype,an.prototype=new on;var sn=an.prototype;function an(e,t,n){var r,i,o;"string"==typeof t&&(n=t,t=null),r=function(e){var t,n=[null,null];"string"==typeof e&&(-1===(t=e.indexOf(":"))?n[1]=e:(n[0]=e.slice(0,t),n[1]=e.slice(t+1)));return n}(n),i=Rt(t)||"1:1",o={start:{line:null,column:null},end:{line:null,column:null}},t&&t.position&&(t=t.position),t&&(t.start?(o=t,t=t.start):o.start=t),e.stack&&(this.stack=e.stack,e=e.message),this.message=e,this.name=i,this.reason=e,this.line=t?t.line:null,this.column=t?t.column:null,this.location=o,this.source=r[0],this.ruleId=r[1]}sn.file="",sn.name="",sn.reason="",sn.message="",sn.stack="",sn.fatal=null,sn.column=null,sn.line=null;var un=r.default,cn=process,ln=dn,fn={}.hasOwnProperty,hn=["history","path","basename","stem","extname","dirname"];function dn(e){var t,n;if(e){if("string"==typeof e||Vt(e))e={contents:e};else if("message"in e&&"messages"in e)return e}else e={};if(!(this instanceof dn))return new dn(e);for(this.data={},this.messages=[],this.history=[],this.cwd=cn.cwd(),n=-1;++n<hn.length;)t=hn[n],fn.call(e,t)&&(this[t]=e[t]);for(t in e)hn.indexOf(t)<0&&(this[t]=e[t])}function pn(e,t){if(e&&e.indexOf(un.sep)>-1)throw new Error("`"+t+"` cannot be a path: did not expect `"+un.sep+"`")}function gn(e,t){if(!e)throw new Error("`"+t+"` cannot be empty")}function mn(e,t){if(!e)throw new Error("Setting `"+t+"` requires `path` to be set too")}dn.prototype.toString=function(e){return(this.contents||"").toString(e)},Object.defineProperty(dn.prototype,"path",{get:function(){return this.history[this.history.length-1]},set:function(e){gn(e,"path"),this.path!==e&&this.history.push(e)}}),Object.defineProperty(dn.prototype,"dirname",{get:function(){return"string"==typeof this.path?un.dirname(this.path):void 0},set:function(e){mn(this.path,"dirname"),this.path=un.join(e||"",this.basename)}}),Object.defineProperty(dn.prototype,"basename",{get:function(){return"string"==typeof this.path?un.basename(this.path):void 0},set:function(e){gn(e,"basename"),pn(e,"basename"),this.path=un.join(this.dirname||"",e)}}),Object.defineProperty(dn.prototype,"extname",{get:function(){return"string"==typeof this.path?un.extname(this.path):void 0},set:function(e){if(pn(e,"extname"),mn(this.path,"extname"),e){if(46!==e.charCodeAt(0))throw new Error("`extname` must start with `.`");if(e.indexOf(".",1)>-1)throw new Error("`extname` cannot contain multiple dots")}this.path=un.join(this.dirname,this.stem+(e||""))}}),Object.defineProperty(dn.prototype,"stem",{get:function(){return"string"==typeof this.path?un.basename(this.path,this.extname):void 0},set:function(e){gn(e,"stem"),pn(e,"stem"),this.path=un.join(this.dirname||"",e+(this.extname||""))}});var vn=ln;ln.prototype.message=function(e,t,n){var r=new rn(e,t,n);this.path&&(r.name=this.path+":"+r.name,r.file=this.path);return r.fatal=!1,this.messages.push(r),r},ln.prototype.info=function(){var e=this.message.apply(this,arguments);return e.fatal=null,e},ln.prototype.fail=function(){var e=this.message.apply(this,arguments);throw e.fatal=!0,e};var yn=vn,xn=function e(){var t,n=[],r=en(),i={},o=-1;return s.data=function(e,n){if("string"==typeof e)return 2===arguments.length?(An("data",t),i[e]=n,s):bn.call(i,e)&&i[e]||null;if(e)return An("data",t),i=e,s;return i},s.freeze=a,s.attachers=n,s.use=function(e){var r;if(An("use",t),null==e);else if("function"==typeof e)l.apply(null,arguments);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?c(e):o(e)}r&&(i.settings=Jt(i.settings||{},r));return s;function o(e){c(e.plugins),e.settings&&(r=Jt(r||{},e.settings))}function a(e){if("function"==typeof e)l(e);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?l.apply(null,e):o(e)}}function c(e){var t=-1;if(null==e);else{if("object"!=typeof e||!("length"in e))throw new Error("Expected a list of plugins, not `"+e+"`");for(;++t<e.length;)a(e[t])}}function l(e,t){var r=u(e);r?(Zt(r[1])&&Zt(t)&&(t=Jt(!0,r[1],t)),r[1]=t):n.push(kn.call(arguments))}},s.parse=function(e){var t,n=yn(e);if(a(),En("parse",t=s.Parser),Sn(t,"parse"))return new t(String(n),n).parse();return t(String(n),n)},s.stringify=function(e,t){var n,r=yn(t);if(a(),Cn("stringify",n=s.Compiler),Tn(e),Sn(n,"compile"))return new n(e,r).compile();return n(e,r)},s.run=c,s.runSync=function(e,t){var n,r;return c(e,t,i),qn("runSync","run",r),n;function i(e,t){r=!0,n=t,zt(e)}},s.process=l,s.processSync=function(e){var t,n;return a(),En("processSync",s.Parser),Cn("processSync",s.Compiler),l(t=yn(e),r),qn("processSync","process",n),t;function r(e){n=!0,zt(e)}},s;function s(){for(var t=e(),r=-1;++r<n.length;)t.use.apply(null,n[r]);return t.data(Jt(!0,{},i)),t}function a(){var e,i;if(t)return s;for(;++o<n.length;)!1!==(e=n[o])[1]&&(!0===e[1]&&(e[1]=void 0),"function"==typeof(i=e[0].apply(s,e.slice(1)))&&r.use(i));return t=!0,o=1/0,s}function u(e){for(var t=-1;++t<n.length;)if(n[t][0]===e)return n[t]}function c(e,t,n){if(Tn(e),a(),n||"function"!=typeof t||(n=t,t=null),!n)return new Promise(i);function i(i,o){r.run(e,yn(t),(function(t,r,s){r=r||e,t?o(t):i?i(r):n(null,r,s)}))}i(null,n)}function l(e,t){if(a(),En("process",s.Parser),Cn("process",s.Compiler),!t)return new Promise(n);function n(n,r){var i=yn(e);wn.run(s,{file:i},(function(e){e?r(e):n?n(i):t(null,i)}))}n(null,t)}}().freeze(),kn=[].slice,bn={}.hasOwnProperty,wn=en().use((function(e,t){t.tree=e.parse(t.file)})).use((function(e,t,n){e.run(t.tree,t.file,(function(e,r,i){e?n(e):(t.tree=r,t.file=i,n())}))})).use((function(e,t){var n=e.stringify(t.tree,t.file);null==n||("string"==typeof n||Vt(n)?t.file.contents=n:t.file.result=n)}));function Sn(e,t){return"function"==typeof e&&e.prototype&&(function(e){var t;for(t in e)return!0;return!1}(e.prototype)||t in e.prototype)}function En(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Parser`")}function Cn(e,t){if("function"!=typeof t)throw new Error("Cannot `"+e+"` without `Compiler`")}function An(e,t){if(t)throw new Error("Cannot invoke `"+e+"` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.")}function Tn(e){if(!e||"string"!=typeof e.type)throw new Error("Expected node, got `"+e+"`")}function qn(e,t,n){if(!n)throw new Error("`"+e+"` finished async. Use `"+t+"` instead")}var Dn=o((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.defaults=t.build=void 0;const n={children:e=>s.defaults.children(e),annotatetextnode:(e,t)=>s.defaults.annotatetextnode(e,t),interpretmarkup:(e="")=>"\n".repeat((e.match(/\n/g)||[]).length),remarkoptions:{}};t.defaults=n,t.build=function(e,t=n){const r=xn().use(_t,t.remarkoptions).use(T,["yaml","toml"]);return s.build(e,r.parse,t)}}));class Fn{constructor(e={}){if(!(e.maxSize&&e.maxSize>0))throw new TypeError("`maxSize` must be a number greater than 0");if("number"==typeof e.maxAge&&0===e.maxAge)throw new TypeError("`maxAge` must be a number greater than 0");this.maxSize=e.maxSize,this.maxAge=e.maxAge||Number.POSITIVE_INFINITY,this.onEviction=e.onEviction,this.cache=new Map,this.oldCache=new Map,this._size=0}_emitEvictions(e){if("function"==typeof this.onEviction)for(const[t,n]of e)this.onEviction(t,n.value)}_deleteIfExpired(e,t){return"number"==typeof t.expiry&&t.expiry<=Date.now()&&("function"==typeof this.onEviction&&this.onEviction(e,t.value),this.delete(e))}_getOrDeleteIfExpired(e,t){if(!1===this._deleteIfExpired(e,t))return t.value}_getItemValue(e,t){return t.expiry?this._getOrDeleteIfExpired(e,t):t.value}_peek(e,t){const n=t.get(e);return this._getItemValue(e,n)}_set(e,t){this.cache.set(e,t),this._size++,this._size>=this.maxSize&&(this._size=0,this._emitEvictions(this.oldCache),this.oldCache=this.cache,this.cache=new Map)}_moveToRecent(e,t){this.oldCache.delete(e),this._set(e,t)}*_entriesAscending(){for(const e of this.oldCache){const[t,n]=e;if(!this.cache.has(t)){!1===this._deleteIfExpired(t,n)&&(yield e)}}for(const e of this.cache){const[t,n]=e;!1===this._deleteIfExpired(t,n)&&(yield e)}}get(e){if(this.cache.has(e)){const t=this.cache.get(e);return this._getItemValue(e,t)}if(this.oldCache.has(e)){const t=this.oldCache.get(e);if(!1===this._deleteIfExpired(e,t))return this._moveToRecent(e,t),t.value}}set(e,t,{maxAge:n=(this.maxAge===Number.POSITIVE_INFINITY?void 0:Date.now()+this.maxAge)}={}){this.cache.has(e)?this.cache.set(e,{value:t,maxAge:n}):this._set(e,{value:t,expiry:n})}has(e){return this.cache.has(e)?!this._deleteIfExpired(e,this.cache.get(e)):!!this.oldCache.has(e)&&!this._deleteIfExpired(e,this.oldCache.get(e))}peek(e){return this.cache.has(e)?this._peek(e,this.cache):this.oldCache.has(e)?this._peek(e,this.oldCache):void 0}delete(e){const t=this.cache.delete(e);return t&&this._size--,this.oldCache.delete(e)||t}clear(){this.cache.clear(),this.oldCache.clear(),this._size=0}resize(e){if(!(e&&e>0))throw new TypeError("`maxSize` must be a number greater than 0");const t=[...this._entriesAscending()],n=t.length-e;n<0?(this.cache=new Map(t),this.oldCache=new Map,this._size=t.length):(n>0&&this._emitEvictions(t.slice(0,n)),this.oldCache=new Map(t.slice(n)),this.cache=new Map,this._size=0),this.maxSize=e}*keys(){for(const[e]of this)yield e}*values(){for(const[,e]of this)yield e}*[Symbol.iterator](){for(const e of this.cache){const[t,n]=e;!1===this._deleteIfExpired(t,n)&&(yield[t,n.value])}for(const e of this.oldCache){const[t,n]=e;if(!this.cache.has(t)){!1===this._deleteIfExpired(t,n)&&(yield[t,n.value])}}}*entriesDescending(){let e=[...this.cache];for(let t=e.length-1;t>=0;--t){const n=e[t],[r,i]=n;!1===this._deleteIfExpired(r,i)&&(yield[r,i.value])}e=[...this.oldCache];for(let t=e.length-1;t>=0;--t){const n=e[t],[r,i]=n;if(!this.cache.has(r)){!1===this._deleteIfExpired(r,i)&&(yield[r,i.value])}}}*entriesAscending(){for(const[e,t]of this._entriesAscending())yield[e,t.value]}get size(){if(!this._size)return this.oldCache.size;let e=0;for(const t of this.oldCache.keys())this.cache.has(t)||e++;return Math.min(this._size+e,this.maxSize)}}const Ln=/frontmatter|code|math/;function In(e,t){if(!e.getLine(t.line))return!1;const n=e.getTokenTypeAt(t);return!n||!Ln.test(n)}function Rn(e,t,n,r){const i=t=>{var n;(null===(n=t.attributes)||void 0===n?void 0:n.isIgnored)||(e.delete(t),t.clear())};if(n&&r)return t.findMarks(n,r).forEach(i);t.getAllMarks().forEach(i)}function On(e){switch(e){case"COLLOQUIALISMS":case"REDUNDANCY":case"STYLE":return"lt-style";case"PUNCTUATION":case"TYPOS":return"lt-major"}return"lt-minor"}const Pn={serverUrl:"https://api.languagetool.org",glassBg:!1,shouldAutoCheck:!1,pickyMode:!1,ruleGrammar:!0,ruleGenderNeutrality:!0,ruleColloquialisms:!0,ruleStyle:!0,ruleRegionalisms:!0,ruleCasing:!0,ruleCompounding:!0,ruleConfusedWords:!0,ruleFalseFriends:!0,ruleMisc:!0,rulePlainEnglish:!0,ruleRedundancy:!0,ruleRepetitions:!0,ruleSemantics:!0,rulePunctuation:!0,ruleTypos:!0,ruleTypography:!0};class Nn extends t.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}requestLanguages(){return i(this,void 0,void 0,(function*(){if(this.languages)return this.languages;const e=yield fetch(`${this.plugin.settings.serverUrl}/v2/languages`).then((e=>e.json()));return this.languages=e,this.languages}))}display(){const{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Settings for LanguageTool"}),new t.Setting(e).setName("Endpoint").setDesc("Endpoint that will be used to make requests to").then((e=>{let t=null;e.addText((e=>{t=e,e.setPlaceholder("Enter endpoint").setValue(this.plugin.settings.serverUrl).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.serverUrl=e.replace(/\/v2\/check\/$/,"").replace(/\/$/,""),yield this.plugin.saveSettings()}))))})).addExtraButton((e=>{e.setIcon("reset").setTooltip("Reset to default").onClick((()=>i(this,void 0,void 0,(function*(){this.plugin.settings.serverUrl=Pn.serverUrl,null==t||t.setValue(Pn.serverUrl),yield this.plugin.saveSettings()}))))}))})),new t.Setting(e).setName("Autocheck Text").setDesc("Check text as you type").addToggle((e=>{e.setValue(this.plugin.settings.shouldAutoCheck).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.shouldAutoCheck=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Glass Background").setDesc("Use the secondary background color of the theme or a glass background").addToggle((e=>{e.setValue(this.plugin.settings.glassBg).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.glassBg=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Static Langauge").setDesc("Set a static language that will always be used (LanguageTool tries to auto detect the language, this is usually not necessary)").addDropdown((e=>{this.requestLanguages().then((t=>{var n;e.addOption("auto","Auto Detect"),t.forEach((t=>e.addOption(t.longCode,t.name))),e.setValue(null!==(n=this.plugin.settings.staticLanguage)&&void 0!==n?n:"auto"),e.onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.staticLanguage=e,yield this.plugin.saveSettings()}))))})).catch(console.error)})),e.createEl("h3",{text:"Rule Categories"}),new t.Setting(e).setName("Picky Mode").setDesc("Provides more style and tonality suggestions, detects long or complex sentences, recognizes colloquialism and redundancies, proactively suggests synonyms for commonly overused words").addToggle((e=>{e.setValue(this.plugin.settings.pickyMode).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.pickyMode=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Casing").setDesc("Rules about detecting uppercase words where lowercase is required and vice versa").addToggle((e=>{e.setValue(this.plugin.settings.ruleCasing).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleCasing=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Colloquialisms").setDesc("Colloquial style").addToggle((e=>{e.setValue(this.plugin.settings.ruleColloquialisms).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleColloquialisms=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Compounding").setDesc("Rules about spelling terms as one word or as as separate words").addToggle((e=>{e.setValue(this.plugin.settings.ruleCompounding).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleCompounding=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Confused Words").setDesc("Words that are easily confused, like 'there' and 'their' in English.").addToggle((e=>{e.setValue(this.plugin.settings.ruleConfusedWords).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleConfusedWords=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("False Friends").setDesc("False friends: words easily confused by language learners because a similar word exists in their native language").addToggle((e=>{e.setValue(this.plugin.settings.ruleFalseFriends).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleFalseFriends=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Gender Neutrality").addToggle((e=>{e.setValue(this.plugin.settings.ruleGenderNeutrality).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleGenderNeutrality=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Grammar").addToggle((e=>{e.setValue(this.plugin.settings.ruleGrammar).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleGrammar=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Misc").setDesc("Miscellaneous rules that don't fit elsewhere.").addToggle((e=>{e.setValue(this.plugin.settings.ruleMisc).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleMisc=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Plain English").addToggle((e=>{e.setValue(this.plugin.settings.rulePlainEnglish).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.rulePlainEnglish=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Punctuation").addToggle((e=>{e.setValue(this.plugin.settings.rulePunctuation).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.rulePunctuation=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Redundancy").addToggle((e=>{e.setValue(this.plugin.settings.ruleRedundancy).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleRedundancy=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Regionalisms").setDesc("Regionalisms: words used only in another language variant or used with different meanings.").addToggle((e=>{e.setValue(this.plugin.settings.ruleRegionalisms).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleRegionalisms=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Repetitions").addToggle((e=>{e.setValue(this.plugin.settings.ruleRepetitions).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleRepetitions=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Semantics").setDesc("Logic, content, and consistency problems.").addToggle((e=>{e.setValue(this.plugin.settings.ruleSemantics).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleSemantics=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Style").setDesc("General style issues not covered by other categories, like overly verbose wording.").addToggle((e=>{e.setValue(this.plugin.settings.ruleStyle).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleStyle=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Typography").setDesc("Problems like incorrectly used dash or quote characters.").addToggle((e=>{e.setValue(this.plugin.settings.ruleTypography).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleTypography=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Typos").setDesc("Spelling issues.").addToggle((e=>{e.setValue(this.plugin.settings.ruleTypos).onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleTypos=e,yield this.plugin.saveSettings()}))))})),new t.Setting(e).setName("Other rule categories").setDesc("Enter a comma-separated list of categories").addText((e=>e.setPlaceholder("Eg. CATEGORY_1,CATEGORY_2").setValue(this.plugin.settings.ruleOtherCategories||"").onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleOtherCategories=e.replace(/\s+/g,""),yield this.plugin.saveSettings()})))))).then((e=>{e.descEl.createEl("br"),e.descEl.createEl("a",{text:"Click here for a list of rules and categories",href:"https://community.languagetool.org/rule/list"},(e=>{e.setAttr("target","_blank")}))})),new t.Setting(e).setName("Enable Specific Rules").setDesc("Enter a comma-separated list of rules").addText((e=>e.setPlaceholder("Eg. RULE_1,RULE_2").setValue(this.plugin.settings.ruleOtherRules||"").onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleOtherRules=e.replace(/\s+/g,""),yield this.plugin.saveSettings()})))))).then((e=>{e.descEl.createEl("br"),e.descEl.createEl("a",{text:"Click here for a list of rules and categories",href:"https://community.languagetool.org/rule/list"},(e=>{e.setAttr("target","_blank")}))})),new t.Setting(e).setName("Disable Specific Rules").setDesc("Enter a comma-separated list of rules").addText((e=>e.setPlaceholder("Eg. RULE_1,RULE_2").setValue(this.plugin.settings.ruleOtherDisabledRules||"").onChange((e=>i(this,void 0,void 0,(function*(){this.plugin.settings.ruleOtherDisabledRules=e.replace(/\s+/g,""),yield this.plugin.saveSettings()})))))).then((e=>{e.descEl.createEl("br"),e.descEl.createEl("a",{text:"Click here for a list of rules and categories",href:"https://community.languagetool.org/rule/list"},(e=>{e.setAttr("target","_blank")}))}))}}class Mn{constructor(e,n){const r=e.match.message,i=e.match.shortMessage,o=(e.match.replacements||[]).slice(0,3).map((e=>e.value)),s=e.match.rule.category.id;this.elem=createDiv({cls:[n,On(s)]},(n=>{n.style.setProperty("left",`${e.position.left}px`),n.style.setProperty("top",`${e.position.bottom}px`),i&&n.createSpan({cls:"lt-title"},(e=>{e.createSpan({text:i})})),r&&n.createSpan({cls:"lt-message",text:r}),o.length&&n.createDiv({cls:"lt-buttoncontainer"},(t=>{for(const n of o)t.createEl("button",{text:n},(t=>{t.onclick=()=>{e.onClick(n)}}))})),n.createDiv({cls:"lt-ignorecontainer"},(n=>{n.createEl("button",{cls:"lt-ignore-btn"},(n=>{"TYPOS"===s?(t.setIcon(n.createSpan(),"plus-with-circle"),n.createSpan({text:"Add to personal dictionary"}),n.onclick=()=>{e.addToDictionary(e.matchedString)}):(t.setIcon(n.createSpan(),"cross"),n.createSpan({text:"Ignore suggestion"}),n.onclick=()=>{e.ignoreSuggestion()})}))}))})),document.body.append(this.elem);const a=this.elem.clientHeight,u=this.elem.clientWidth;e.position.bottom+a>window.innerHeight&&this.elem.style.setProperty("top",e.position.top-a+"px"),e.position.left+u>window.innerWidth&&this.elem.style.setProperty("left",window.innerWidth-u-15+"px")}get element(){return this.elem}destroy(){var e;null===(e=this.elem)||void 0===e||e.remove()}}class Bn extends t.Plugin{constructor(){super(...arguments),this.isloading=!1,this.onCodemirrorChange=(e,t)=>{if(this.openWidget&&(this.openWidget.destroy(),this.openWidget=void 0),this.markerMap.size>0&&t.origin&&"+"===t.origin[0]){const n=e.findMarksAt(t.from);n.length&&n.forEach((e=>e.clear()))}if(this.settings.shouldAutoCheck&&t.origin&&("+"===t.origin[0]||"paste"===t.origin)){const n=this.dirtyLines.has(e)?this.dirtyLines.get(e):[];t.text.forEach(((r,i)=>{const o=t.from.line+i;In(e,Object.assign(Object.assign({},t.from),{line:o}))&&n.push(o)})),this.dirtyLines.set(e,n),this.setStatusBarWorking(),this.checkLines(e)}},this.runAutoDetection=e=>i(this,void 0,void 0,(function*(){const t=this.dirtyLines.get(e);if(!t||0===t.length)return this.setStatusBarReady();this.dirtyLines.delete(e);const n=t.sort(((e,t)=>e-t)),r=n[n.length-1],i=e.getLine(r),o={line:n[0],ch:0},s={line:n[n.length-1],ch:i.length};try{yield this.runDetection(e,o,s)}catch(e){console.error(e),this.setStatusBarReady()}}))}onload(){return i(this,void 0,void 0,(function*(){if(this.markerMap=new Map,this.hashLru=new Fn({maxSize:10}),this.dirtyLines=new WeakMap,this.checkLines=t.debounce(this.runAutoDetection,3e3,!0),yield this.loadSettings(),this.settings.serverUrl.includes("/v2/check")){new t.Notice("invalid or outdated LanguageTool Settings, I'm trying to fix it.\nIf it does not work, simply reinstall the plugin",1e4),this.settings.serverUrl=this.settings.serverUrl.replace("/v2/check","");try{yield this.saveSettings()}catch(e){console.error(e)}}this.addSettingTab(new Nn(this.app,this)),this.app.workspace.onLayoutReady((()=>{this.statusBarText=this.addStatusBarItem(),this.setStatusBarReady(),this.registerDomEvent(this.statusBarText,"click",(()=>i(this,void 0,void 0,(function*(){var e;const n=null===(e=this.statusBarText.parentElement)||void 0===e?void 0:e.getBoundingClientRect(),r=this.statusBarText.getBoundingClientRect();new t.Menu(this.app).addItem((e=>{e.setTitle("Check current document"),e.setIcon("checkbox-glyph"),e.onClick((()=>i(this,void 0,void 0,(function*(){const e=this.app.workspace.activeLeaf;if(e.view instanceof t.MarkdownView&&"source"===e.view.getMode())try{yield this.runDetection(e.view.sourceMode.cmEditor)}catch(e){console.error(e)}}))))})).addItem((e=>{e.setTitle(this.settings.shouldAutoCheck?"Disable automatic checking":"Enable automatic checking"),e.setIcon("uppercase-lowercase-a"),e.onClick((()=>i(this,void 0,void 0,(function*(){this.settings.shouldAutoCheck=!this.settings.shouldAutoCheck,yield this.saveSettings()}))))})).addItem((e=>{e.setTitle("Clear suggestions"),e.setIcon("reset"),e.onClick((()=>{const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(!e)return;const n=e.sourceMode.cmEditor;Rn(this.markerMap,n)}))})).showAtPosition({x:r.right+5,y:((null==n?void 0:n.top)||0)-5})}))))})),this.registerCodeMirror((e=>{e.on("change",this.onCodemirrorChange)})),this.registerDomEvent(document,"pointerup",(e=>{var n,r;const i=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(!i)return;if(e.target===(null===(n=this.openWidget)||void 0===n?void 0:n.element)||(null===(r=this.openWidget)||void 0===r?void 0:r.element.contains(e.target)))return;if(this.openWidget&&(this.openWidget.destroy(),this.openWidget=void 0),0===this.markerMap.size||e.target instanceof HTMLElement&&!e.target.hasClass("lt-underline"))return;const o=i.sourceMode.cmEditor;if(!o.getWrapperElement().contains(e.target))return;const s=o.coordsChar({left:e.clientX,top:e.clientY}),a=o.findMarksAt(s);if(0===a.length)return;const u=a[0],c=this.markerMap.get(u);if(!c)return;const{from:l,to:f}=u.find(),h=o.cursorCoords(l),d=o.getRange(l,f);this.openWidget=new Mn({match:c,matchedString:d,position:h,onClick:e=>{var t;o.replaceRange(e,l,f),u.clear(),null===(t=this.openWidget)||void 0===t||t.destroy(),this.openWidget=void 0},addToDictionary:e=>{var t;const n=this.app.vault.getConfig("spellcheckDictionary")||[];this.app.vault.setConfig("spellcheckDictionary",[...n,e]),u.clear(),null===(t=this.openWidget)||void 0===t||t.destroy(),this.openWidget=void 0},ignoreSuggestion:()=>{var e;o.markText(l,f,{clearOnEnter:!1,attributes:{isIgnored:"true"}}),u.clear(),null===(e=this.openWidget)||void 0===e||e.destroy(),this.openWidget=void 0}},this.settings.glassBg?"lt-predictions-container-glass":"lt-predictions-container")})),this.addCommand({id:"ltcheck-text",name:"Check Text",checkCallback:e=>{const n=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(e)return Boolean(n);if(!n)return;const r=n.sourceMode.cmEditor;r.somethingSelected()?this.runDetection(r,r.getCursor("from"),r.getCursor("to")).catch((e=>{console.error(e)})):this.runDetection(r).catch((e=>{console.error(e)}))}}),this.addCommand({id:"ltautocheck-text",name:"Toggle Automatic Checking",callback:()=>i(this,void 0,void 0,(function*(){this.settings.shouldAutoCheck=!this.settings.shouldAutoCheck,yield this.saveSettings()}))}),this.addCommand({id:"ltclear",name:"Clear Suggestions",checkCallback:e=>{const n=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(e)return Boolean(n)||this.markerMap.size>0;if(!n)return;const r=n.sourceMode.cmEditor;Rn(this.markerMap,r)}})}))}onunload(){this.openWidget&&(this.openWidget.destroy(),this.openWidget=void 0),this.app.workspace.iterateCodeMirrors((e=>{Rn(this.markerMap,e),e.off("change",this.onCodemirrorChange)}))}getDetectionResult(e){return i(this,void 0,void 0,(function*(){const n=function(e){let t=0;if(0===e.length)return t;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t&=t;return t}(e);if(this.hashLru.has(n))return this.hashLru.get(n);const{enabledCategories:r,disabledCategories:i}=function(e){const t=e.ruleOtherCategories?e.ruleOtherCategories.split(","):[],n=[];return e.ruleCasing?t.push("CASING"):n.push("CASING"),e.ruleColloquialisms?t.push("COLLOCATIONS"):n.push("COLLOCATIONS"),e.ruleCompounding?t.push("COMPOUNDING"):n.push("COMPOUNDING"),e.ruleConfusedWords?t.push("CONFUSED_WORDS"):n.push("CONFUSED_WORDS"),e.ruleFalseFriends?t.push("FALSE_FRIENDS"):n.push("FALSE_FRIENDS"),e.ruleGenderNeutrality?t.push("GENDER_NEUTRALITY"):n.push("GENDER_NEUTRALITY"),e.ruleGrammar?t.push("GRAMMAR"):n.push("GRAMMAR"),e.ruleMisc?t.push("MISC"):n.push("MISC"),e.rulePlainEnglish?t.push("PLAIN_ENGLISH"):n.push("PLAIN_ENGLISH"),e.rulePunctuation?t.push("PUNCTUATION"):n.push("PUNCTUATION"),e.ruleRedundancy?t.push("REDUNDANCY"):n.push("REDUNDANCY"),e.ruleRegionalisms?t.push("REGIONALISMS"):n.push("REGIONALISMS"),e.ruleRepetitions?t.push("REPETITIONS"):n.push("REPETITIONS"),e.ruleSemantics?t.push("SEMANTICS"):n.push("SEMANTICS"),e.ruleStyle?t.push("STYLE"):n.push("STYLE"),e.ruleTypography?t.push("TYPOGRAPHY"):n.push("TYPOGRAPHY"),e.ruleTypos?t.push("TYPOS"):n.push("TYPOS"),{enabledCategories:t,disabledCategories:n}}(this.settings),o={data:e,language:"auto",enabledOnly:"false",level:this.settings.pickyMode?"picky":"default"};let s,a;r.length&&(o.enabledCategories=r.join(",")),i.length&&(o.disabledCategories=i.join(",")),this.settings.ruleOtherRules&&(o.enabledRules=this.settings.ruleOtherRules),this.settings.ruleOtherDisabledRules&&(o.disabledRules=this.settings.ruleOtherDisabledRules),this.settings.apikey&&this.settings.username&&this.settings.apikey.length>1&&this.settings.username.length>1&&(o.username=this.settings.username,o.apiKey=this.settings.apikey),this.settings.staticLanguage&&this.settings.staticLanguage.length>0&&"auto"!==this.settings.staticLanguage&&(o.language=this.settings.staticLanguage);try{s=yield fetch(`${this.settings.serverUrl}/v2/check`,{method:"POST",body:Object.keys(o).map((e=>`${encodeURIComponent(e)}=${encodeURIComponent(o[e])}`)).join("&"),headers:{"Content-Type":"application/x-www-form-urlencoded",Accept:"application/json"}})}catch(e){return Promise.reject(e)}if(!s.ok)return new t.Notice(`request to LanguageTool failed\n${s.statusText}`,5e3),Promise.reject(new Error(`unexpected status ${s.status}, see network tab`));try{a=yield s.json()}catch(e){return Promise.reject(e)}return this.hashLru.set(n,a),a}))}runDetection(e,t,n){return i(this,void 0,void 0,(function*(){this.setStatusBarWorking();const r=e.getDoc(),i=t&&n?e.getRange(t,n):e.getValue(),o=t&&n?r.indexFromPos(t):0,s=Dn.build(i,Object.assign(Object.assign({},Dn.defaults),{interpretmarkup:(e="")=>/^`[^`]+`$/.test(e)?e:"\n".repeat((e.match(/\n/g)||[]).length)}));let a;try{a=yield this.getDetectionResult(JSON.stringify(s))}catch(e){return this.setStatusBarReady(),Promise.reject(e)}if(t&&n?Rn(this.markerMap,e,t,n):Rn(this.markerMap,e),!a.matches)return this.setStatusBarReady();for(const t of a.matches){const n=r.posFromIndex(t.offset+o),i=e.findMarksAt(n);if(i&&i.length>0)continue;const s=r.posFromIndex(t.offset+o+t.length);if(!In(e,n)||!In(e,s)||!this.matchAllowed(e,t,n,s))continue;const a=e.markText(n,s,{className:`lt-underline ${On(t.rule.category.id)}`,clearOnEnter:!1});this.markerMap.set(a,t)}this.setStatusBarReady()}))}matchAllowed(e,t,n,r){var i;const o=e.getRange(n,r);if("TYPOS"===t.rule.category.id){const e=this.app.vault.getConfig("spellcheckDictionary");if(e&&e.includes(o))return!1}const s=e.getLineTokens(n.line);return!s.length||!(null===(i=s[0].type)||void 0===i?void 0:i.includes("table"))||"WHITESPACE_RULE"!==t.rule.id}setStatusBarReady(){this.isloading=!1,this.statusBarText.empty(),this.statusBarText.createSpan({cls:"lt-status-bar-btn"},(e=>{e.createSpan({cls:"lt-status-bar-check-icon",text:"Aa"})}))}setStatusBarWorking(){this.isloading||(this.isloading=!0,this.statusBarText.empty(),this.statusBarText.createSpan({cls:["lt-status-bar-btn","lt-loading"]},(e=>{t.setIcon(e,"sync-small")})))}loadSettings(){return i(this,void 0,void 0,(function*(){this.settings=Object.assign({},Pn,yield this.loadData())}))}saveSettings(){return i(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}}module.exports=Bn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
