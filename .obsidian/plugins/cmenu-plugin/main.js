/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const icons = {
    cMenuAdd: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="white" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4z" fill="white"/><path d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10s10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8s8 3.589 8 8s-3.589 8-8 8z" fill="white"/></svg>`,
    cMenuDelete: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="white" stroke-width="0" stroke-linecap="round" stroke-linejoin="round"><path d="M5 20a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V8h2V6h-4V4a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v2H3v2h2zM9 4h6v2H9zM8 8h9v12H7V8z" fill="white"/><path d="M9 10h2v8H9zm4 0h2v8h-2z" fill="white"/></svg>`,
    "codeblock-glyph": `<svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-width="2" d="M9 22l6-20m2 15l5-5l-5-5M7 17l-5-5l5-5"/></svg>`,
    "underline-glyph": `<svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 1024 1024"><path fill="currentColor" d="M824 804H200c-4.4 0-8 3.4-8 7.6v60.8c0 4.2 3.6 7.6 8 7.6h624c4.4 0 8-3.4 8-7.6v-60.8c0-4.2-3.6-7.6-8-7.6zm-312-76c69.4 0 134.6-27.1 183.8-76.2C745 602.7 772 537.4 772 468V156c0-6.6-5.4-12-12-12h-60c-6.6 0-12 5.4-12 12v312c0 97-79 176-176 176s-176-79-176-176V156c0-6.6-5.4-12-12-12h-60c-6.6 0-12 5.4-12 12v312c0 69.4 27.1 134.6 76.2 183.8C377.3 701 442.6 728 512 728z"/></svg>`,
    "superscript-glyph": `<svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path fill="currentColor"d="M16 7.41L11.41 12L16 16.59L14.59 18L10 13.41L5.41 18L4 16.59L8.59 12L4 7.41L5.41 6L10 10.59L14.59 6L16 7.41M21.85 9h-4.88V8l.89-.82c.76-.64 1.32-1.18 1.7-1.63c.37-.44.56-.85.57-1.23a.884.884 0 0 0-.27-.7c-.18-.19-.47-.28-.86-.29c-.31.01-.58.07-.84.17l-.66.39l-.45-1.17c.27-.22.59-.39.98-.53S18.85 2 19.32 2c.78 0 1.38.2 1.78.61c.4.39.62.93.62 1.57c-.01.56-.19 1.08-.54 1.55c-.34.48-.76.93-1.27 1.36l-.64.52v.02h2.58V9z"/></svg>`,
    "subscript-glyph": `<svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><path fill="currentColor" d="M16 7.41L11.41 12L16 16.59L14.59 18L10 13.41L5.41 18L4 16.59L8.59 12L4 7.41L5.41 6L10 10.59L14.59 6L16 7.41m5.85 13.62h-4.88v-1l.89-.8c.76-.65 1.32-1.19 1.7-1.63c.37-.44.56-.85.57-1.24a.898.898 0 0 0-.27-.7c-.18-.16-.47-.28-.86-.28c-.31 0-.58.06-.84.18l-.66.38l-.45-1.17c.27-.21.59-.39.98-.53s.82-.24 1.29-.24c.78.04 1.38.25 1.78.66c.4.41.62.93.62 1.57c-.01.56-.19 1.08-.54 1.55c-.34.47-.76.92-1.27 1.36l-.64.52v.02h2.58v1.35z"/></svg>`,
};
function addIcons() {
    Object.keys(icons).forEach((key) => {
        obsidian.addIcon(key, icons[key]);
    });
}

function selfDestruct() {
    let cMenuModalBar = document.getElementById("cMenuModalBar");
    if (cMenuModalBar) {
        if (cMenuModalBar.firstChild) {
            cMenuModalBar.removeChild(cMenuModalBar.firstChild);
        }
        cMenuModalBar.remove();
    }
}
function cMenuPopover(app, settings) {
    function createMenu() {
        const generateMenu = () => {
            var cMenu = createEl("div");
            cMenu.setAttribute("id", "cMenuModalBar");
            settings.aestheticStyle == "default"
                ? cMenu.addClass("cMenuDefaultAesthetic")
                : cMenu.addClass("cMenuGlassAesthetic");
            settings.appendMethod == "workspace"
                ? document.body
                    .querySelector(".mod-vertical.mod-root")
                    .insertAdjacentElement("afterbegin", cMenu)
                : document.body.appendChild(cMenu);
            settings.menuCommands.forEach((item) => {
                var button = new obsidian.ButtonComponent(cMenu);
                button
                    .setIcon(item.icon)
                    .setClass("cMenuCommandItem")
                    .setTooltip(item.name)
                    .onClick((_) => {
                    //@ts-ignore
                    app.commands.executeCommandById(item.id);
                });
            });
        };
        if (app.workspace.getActiveViewOfType(obsidian.MarkdownView)) {
            var cMenuModalBar = document.getElementById("cMenuModalBar");
            if (cMenuModalBar) {
                return;
            }
            else {
                generateMenu();
                let cMenuModalBar = document.getElementById("cMenuModalBar");
                cMenuModalBar.childElementCount >= 9
                    ? cMenuModalBar.addClass("cMenuGrid")
                    : cMenuModalBar.addClass("cMenuFlex");
                var clientWidth = document.getElementById("cMenuModalBar").offsetWidth;
                cMenuModalBar.setAttribute("style", `left: calc(50% - calc(${clientWidth}px / 2));`);
            }
        }
        else {
            selfDestruct();
        }
    }
    createMenu();
}

const appIcons = [
    // from obsidian app.js file
    "add-note-glyph",
    "any-key",
    "audio-file",
    "blocks",
    "bold-glyph",
    "box-glyph",
    "bracket-glyph",
    "broken-link",
    "bullet-list-glyph",
    "bullet-list",
    "calendar-glyph",
    "calendar-with-checkmark",
    "check-in-circle",
    "check-small",
    "checkbox-glyph",
    "checkmark",
    "clock-glyph",
    "clock",
    "cloud",
    "code-glyph",
    "command-glyph",
    "compress-glyph",
    "create-new",
    "cross-in-box",
    "cross",
    "crossed-star",
    "csv",
    "deleteColumn",
    "deleteRow",
    "dice-glyph",
    "dice",
    "document",
    "documents",
    "dot-network",
    "double-down-arrow-glyph",
    "double-up-arrow-glyph",
    "down-arrow-with-tail",
    "down-chevron-glyph",
    "down-curly-arrow-glyph",
    "duplicate-glyph",
    "enlarge-glyph",
    "enter",
    "exit-fullscreen",
    "expand-vertically",
    "file-explorer-glyph",
    "filled-pin",
    "formula",
    "folder",
    "forward-arrow",
    "fullscreen",
    "gear",
    "go-to-file",
    "graph-glyph",
    "hashtag",
    "heading-glyph",
    "help",
    "highlight-glyph",
    "horizontal-split",
    "image-file",
    "image-glyph",
    "import-glyph",
    "indent-glyph",
    "info",
    "insertColumn",
    "insertRow",
    "install",
    "italic-glyph",
    "keyboard-glyph",
    "languages",
    "left-arrow-with-tail",
    "left-arrow",
    "left-chevron-glyph",
    "lines-of-text",
    "link-glyph",
    "link",
    "links-coming-in",
    "links-going-out",
    "logo-crystal",
    "magnifying-glass",
    "merge-files-glyph",
    "merge-files",
    "microphone-filled",
    "microphone",
    "minus-with-circle",
    "moveColumnLeft",
    "moveColumnRight",
    "moveRowDown",
    "moveRowUp",
    "navigate-glyph",
    "note-glyph",
    "number-list-glyph",
    "open-elsewhere-glyph",
    "open-vault",
    "pane-layout",
    "paper-plane-glyph",
    "paper-plane",
    "paste-text",
    "paste",
    "paused",
    "pdf-file",
    "pencil",
    "percent-sign-glyph",
    "pin",
    "play-audio-glyph",
    "plus-minus-glyph",
    "plus-with-circle",
    "popup-open",
    "presentation-glyph",
    "presentation",
    "price-tag-glyph",
    "question-mark-glyph",
    "quote-glyph",
    "redo-glyph",
    "reset",
    "restore-file-glyph",
    "right-arrow-with-tail",
    "right-arrow",
    "right-chevron-glyph",
    "right-triangle",
    "run-command",
    "scissors-glyph",
    "scissors",
    "search-glyph",
    "search",
    "select-all-text",
    "sheets-in-box",
    "sortAsc",
    "sortDesc",
    "spreadsheet",
    "split",
    "stacked-levels",
    "star-glyph",
    "star-list",
    "star",
    "stop-audio-glyph",
    "strikethrough-glyph",
    "switch",
    "sync-small",
    "sync",
    "tag-glyph",
    "three-horizontal-bars",
    "tomorrow-glyph",
    "trash",
    "two-blank-pages",
    "undo-glyph",
    "unindent-glyph",
    "up-and-down-arrows",
    "up-arrow-with-tail",
    "up-chevron-glyph",
    "up-curly-arrow-glyph",
    "uppercase-lowercase-a",
    "vault",
    "vertical-split",
    "vertical-three-dots",
    "workspace-glyph",
    "wrench-screwdriver-glyph",
    "yesterday-glyph",
];

class ChooseFromIconList extends obsidian.FuzzySuggestModal {
    constructor(plugin, command) {
        super(plugin.app);
        this.plugin = plugin;
        this.command = command;
        this.setPlaceholder("Choose from icon list");
    }
    getItems() {
        return appIcons;
    }
    getItemText(item) {
        return item;
    }
    renderSuggestion(icon, iconItem) {
        const span = createSpan({ cls: "cMenuIconPick" });
        iconItem.appendChild(span);
        obsidian.setIcon(span, icon.item);
        super.renderSuggestion(icon, iconItem);
    }
    onChooseItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.command.icon = item;
            this.plugin.settings.menuCommands.push(this.command);
            yield this.plugin.saveSettings();
            setTimeout(() => {
                dispatchEvent(new Event("cMenu-NewCommand"));
            }, 100);
            console.log(`%cCommand '${this.command.name}' was added to cMenu`, "color: #17ff74");
        });
    }
}
class CommandPicker extends obsidian.FuzzySuggestModal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
        this.app;
        this.setPlaceholder("Choose from commands list");
    }
    getItems() {
        //@ts-ignore
        return this.app.commands.listCommands();
    }
    getItemText(item) {
        return item.name;
    }
    onChooseItem(item) {
        return __awaiter(this, void 0, void 0, function* () {
            if (item.icon) {
                this.plugin.settings.menuCommands.push(item);
                yield this.plugin.saveSettings();
                setTimeout(() => {
                    dispatchEvent(new Event("cMenu-NewCommand"));
                }, 100);
                console.log(`%cCommand '${item.name}' was added to cMenu`, "color: #17ff74");
            }
            else {
                new ChooseFromIconList(this.plugin, item).open();
            }
        });
    }
}

const APPEND_METHODS = ["body", "workspace"];
const AESTHETIC_STYLES = ["glass", "default"];
const DEFAULT_SETTINGS = {
    aestheticStyle: "default",
    menuCommands: [
        {
            id: "editor:toggle-bold",
            name: "Toggle bold",
            icon: "bold-glyph",
        },
        {
            id: "editor:toggle-italics",
            name: "Toggle italics",
            icon: "italic-glyph",
        },
        {
            id: "editor:toggle-strikethrough",
            name: "Toggle strikethrough",
            icon: "strikethrough-glyph",
        },
        {
            id: "cmenu-plugin:underline",
            name: "cMenu: Toggle Underline",
            icon: "underline-glyph",
        },
        {
            id: "cmenu-plugin:superscript",
            name: "cMenu: Toggle Superscript",
            icon: "superscript-glyph",
        },
        {
            id: "cmenu-plugin:subscript",
            name: "cMenu: Toggle Subscript",
            icon: "subscript-glyph",
        },
        {
            id: "editor:toggle-code",
            name: "Toggle code",
            icon: "code-glyph",
        },
        {
            id: "cmenu-plugin:codeblock",
            name: "cMenu: Toggle codeblock",
            icon: "codeblock-glyph",
        },
        {
            id: "editor:toggle-blockquote",
            name: "Toggle blockquote",
            icon: "quote-glyph",
        },
    ],
    gridItems: "1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr",
    appendMethod: "workspace",
};
class cMenuSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        addEventListener("cMenu-NewCommand", () => {
            this.display();
        });
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "cMenu Settings" });
        new obsidian.Setting(containerEl)
            .setName("Customize cMenu append method.")
            .setDesc("Choose where cMenu will append upon regeneration.")
            .addDropdown((dropdown) => {
            let methods = {};
            APPEND_METHODS.map((method) => (methods[method] = method));
            dropdown.addOptions(methods);
            dropdown
                .setValue(this.plugin.settings.appendMethod)
                .onChange((appendMethod) => {
                this.plugin.settings.appendMethod = appendMethod;
                this.plugin.saveSettings();
            });
        });
        new obsidian.Setting(containerEl)
            .setName("Customize cMenu aesthetic.")
            .setDesc("Choose between a glass morphism and default style for cMenu.")
            .addDropdown((dropdown) => {
            let aesthetics = {};
            AESTHETIC_STYLES.map((aesthetic) => (aesthetics[aesthetic] = aesthetic));
            dropdown.addOptions(aesthetics);
            dropdown
                .setValue(this.plugin.settings.aestheticStyle)
                .onChange((aestheticStyle) => {
                this.plugin.settings.aestheticStyle = aestheticStyle;
                this.plugin.saveSettings();
            });
        });
        new obsidian.Setting(containerEl)
            .setName("Customize cMenu Commands")
            .setDesc("Add a command from Obsidian's commands library to cMenu. By default, your commands are set to: Toggle bold, Toggle italics, Toggle strikethrough, cMenu: Toggle Underline, cMenu: Toggle Superscript, cMenu: Toggle Subscript, Toggle code, cMenu: Toggle codeblock, and Toggle blockquote.")
            .addButton((addButton) => {
            addButton
                .setIcon("cMenuAdd")
                .setClass("cMenuSettingsButton")
                .setClass("cMenuSettingsButtonAdd")
                .onClick(() => {
                new CommandPicker(this.plugin).open();
            });
        });
        this.plugin.settings.menuCommands.forEach((newCommand) => {
            const setting = new obsidian.Setting(containerEl)
                .setName(newCommand.name)
                .addButton((deleteButton) => {
                deleteButton
                    .setIcon("cMenuDelete")
                    .setClass("cMenuSettingsButton")
                    .setClass("cMenuSettingsButtonDelete")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.menuCommands.remove(newCommand);
                    yield this.plugin.saveSettings();
                    this.display();
                    console.log(`%cCommand '${newCommand.name}' was removed from cMenu`, "color: #ff2360");
                }));
            });
            setting.nameEl;
        });
        const div = containerEl.createEl("div", {
            cls: "cDonationSection",
        });
        const credit = createEl("p");
        const donateText = createEl("p");
        donateText.appendText("If you like this Plugin and are considering donating to support continued development, use the button below!");
        credit.appendText("Created with ❤️ by Chetachi");
        credit.setAttribute("style", "color: var(--text-muted)");
        div.appendChild(donateText);
        div.appendChild(credit);
        div.appendChild(createDonateButton("https://www.buymeacoffee.com/chetachi"));
    }
    save() {
        this.plugin.saveSettings();
    }
}
const createDonateButton = (link) => {
    const a = createEl("a");
    a.setAttribute("href", link);
    a.addClass("buymeacoffee-chetachi-img");
    a.innerHTML = `<img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=chetachi&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000" height="42px">`;
    return a;
};

class cMenuPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.handlecMenu = () => {
            cMenuPopover(this.app, this.settings);
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("cMenu v" + this.manifest.version + " loaded");
            yield this.loadSettings();
            addIcons();
            this.addCommand({
                id: "underline",
                name: "Toggle Underline",
                icon: "underline-glyph",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    var activeLeaf = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (activeLeaf) {
                        var view = activeLeaf;
                        var editor = view.editor;
                        var selection = editor.getSelection();
                        if (selection) {
                            editor.replaceSelection("<u>" + selection + "</u>");
                        }
                        else {
                            return;
                        }
                    }
                }),
            });
            this.addCommand({
                id: "superscript",
                name: "Toggle Superscript",
                icon: "superscript-glyph",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    var activeLeaf = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (activeLeaf) {
                        var view = activeLeaf;
                        var editor = view.editor;
                        var selection = editor.getSelection();
                        if (selection) {
                            editor.replaceSelection("<sup>" + selection + "</sup>");
                        }
                        else {
                            return;
                        }
                    }
                }),
            });
            this.addCommand({
                id: "subscript",
                name: "Toggle Subscript",
                icon: "subscript-glyph",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    var activeLeaf = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (activeLeaf) {
                        var view = activeLeaf;
                        var editor = view.editor;
                        var selection = editor.getSelection();
                        if (selection) {
                            editor.replaceSelection("<sub>" + selection + "</sub>");
                        }
                        else {
                            return;
                        }
                    }
                }),
            });
            this.addCommand({
                id: "codeblock",
                name: "Toggle codeblock",
                icon: "codeblock-glyph",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    var activeLeaf = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (activeLeaf) {
                        var view = activeLeaf;
                        var editor = view.editor;
                        var selection = editor.getSelection();
                        if (selection) {
                            editor.replaceSelection("\n```\n" + selection + "\n```\n");
                        }
                        else {
                            return;
                        }
                    }
                }),
            });
            this.addSettingTab(new cMenuSettingTab(this.app, this));
            this.registerEvent(this.app.workspace.on("active-leaf-change", this.handlecMenu));
        });
    }
    onunload() {
        selfDestruct();
        console.log("cMenu unloaded");
        this.app.workspace.off("active-leaf-change", this.handlecMenu);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = cMenuPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
