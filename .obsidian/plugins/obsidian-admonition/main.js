/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const ADMONITION_MAP = {
    note: "note",
    seealso: "note",
    abstract: "abstract",
    summary: "abstract",
    info: "info",
    todo: "todo",
    tip: "tip",
    hint: "tip",
    important: "tip",
    success: "success",
    check: "check",
    done: "done",
    question: "question",
    help: "question",
    faq: "question",
    warning: "warning",
    caution: "warning",
    attention: "warning",
    failure: "failure",
    fail: "failure",
    missing: "failure",
    danger: "danger",
    error: "danger",
    bug: "bug",
    example: "example",
    quote: "quote",
    cite: "quote"
};
const classMap = Object.keys(ADMONITION_MAP).map((k) => `language-${k}`);
/** Fast Intersection taken from
 * https://codeburst.io/optimizing-array-analytics-in-javascript-part-two-search-intersection-and-cross-products-79b4a6d68da0
 */
const fastIntersection = (...arrays) => {
    // if we process the arrays from shortest to longest
    // then we will identify failure points faster, i.e. when
    // one item is not in all arrays
    const ordered = arrays.length === 1
        ? arrays
        : arrays.sort((a1, a2) => a1.length - a2.length), shortest = ordered[0], set = new Set(), // used for bookeeping, Sets are faster
    result = []; // the intersection, conversion from Set is slow
    // for each item in the shortest array
    for (let i = 0; i < shortest.length; i++) {
        const item = shortest[i];
        // see if item is in every subsequent array
        let every = true; // don't use ordered.every ... it is slow
        for (let j = 1; j < ordered.length; j++) {
            if (ordered[j].includes(item))
                continue;
            every = false;
            break;
        }
        // ignore if not in every other array, or if already captured
        if (!every || set.has(item))
            continue;
        // otherwise, add to bookeeping set and the result
        set.add(item);
        result[result.length] = item;
    }
    return result;
};
class ObsidianAdmonition extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Obsidian Admonition loaded");
            this.registerMarkdownPostProcessor(this.postprocessor.bind(this));
        });
    }
    postprocessor(el, ctx) {
        //don't process if no code elements in element;
        let codeBlocks = el.querySelectorAll("code");
        if (!codeBlocks.length)
            return;
        //don't process if the code block is not an admonition type
        codeBlocks = Array.prototype.filter.call(codeBlocks, (element) => element &&
            fastIntersection(Array.prototype.slice.call(element.classList), classMap).length > 0);
        if (!codeBlocks.length)
            return;
        //render admonition element
        codeBlocks.forEach((block) => {
            if (block) {
                let type = ADMONITION_MAP[Array.prototype.find
                    .call(block.classList, (cls) => classMap.includes(cls))
                    .split("language-")
                    .pop()
                    .trim()];
                if (!type) {
                    new obsidian.Notice("There was an error rendering the admonition.");
                    return;
                }
                let params = Object.fromEntries(block.innerText
                    .split("\n")
                    .map((l) => l.split(":").map((s) => s.trim())));
                let { title = type[0].toUpperCase() + type.slice(1).toLowerCase(), content = block.innerText, collapse } = params;
                if (Object.prototype.hasOwnProperty.call(params, "title") &&
                    params.title === undefined &&
                    params.collapse) {
                    title = "";
                }
                if (Object.prototype.hasOwnProperty.call(params, "collapse") &&
                    (params.collapse.length == 0 ||
                        params.collapse === undefined ||
                        collapse !== "open")) {
                    collapse = "closed";
                }
                this.buildAdmonition(block.parentElement, type, title, content, collapse);
            }
        });
    }
    buildAdmonition(el, type, title, content, collapse) {
        let attrs, els = ["div", "div"];
        if (collapse) {
            els = ["details", "summary"];
            attrs = {
                [collapse]: true
            };
        }
        let admonition = createEl(els[0], {
            cls: `admonition admonition-${type}`,
            attr: attrs
        });
        admonition.createEl(els[1], {
            cls: `admonition-title ${!title.trim().length ? "no-title" : ""}`,
            text: title
        });
        admonition.createEl("p", {
            cls: "admonition-content",
            text: content
        });
        el.parentElement.replaceChild(admonition, el);
    }
    onunload() {
        console.log("Obsidian Admonition unloaded");
    }
}

module.exports = ObsidianAdmonition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJQbHVnaW4iLCJOb3RpY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF1REE7QUFDTyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDN0QsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEgsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDL0QsUUFBUSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ3RHLFFBQVEsU0FBUyxJQUFJLENBQUMsTUFB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
